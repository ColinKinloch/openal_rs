/* automatically generated by rust-bindgen */

pub const __llvm__: ::std::os::raw::c_uint = 1;
pub const __clang__: ::std::os::raw::c_uint = 1;
pub const __clang_major__: ::std::os::raw::c_uint = 8;
pub const __clang_minor__: ::std::os::raw::c_uint = 1;
pub const __clang_patchlevel__: ::std::os::raw::c_uint = 0;
pub const __clang_version__: &'static [u8; 23usize] =
    b"8.1.0 (clang-802.0.42)\x00";
pub const __GNUC_MINOR__: ::std::os::raw::c_uint = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uint = 1;
pub const __GNUC__: ::std::os::raw::c_uint = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_uint = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uint = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uint = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uint = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uint = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uint = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uint = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uint = 1;
pub const __VERSION__: &'static [u8; 51usize] =
    b"4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)\x00";
pub const __OBJC_BOOL_IS_BOOL: ::std::os::raw::c_uint = 0;
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uint = 1;
pub const __BLOCKS__: ::std::os::raw::c_uint = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_uint = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_uint = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1;
pub const _LP64: ::std::os::raw::c_uint = 1;
pub const __LP64__: ::std::os::raw::c_uint = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uint = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uint = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_int = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_int = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_int = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uint = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uint = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uint = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __SIZE_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uint = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uint = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uint = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uint = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uint = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_int = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_int = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uint = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uint = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_uint = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_uint = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_int = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_int = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uint = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uint = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_uint = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_uint = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_int = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_int = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uint = 16;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __INT64_FMTd__: &'static [u8; 4usize] = b"lld\x00";
pub const __INT64_FMTi__: &'static [u8; 4usize] = b"lli\x00";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __UINT8_MAX__: ::std::os::raw::c_uint = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uint = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __UINT16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 4usize] = b"llo\x00";
pub const __UINT64_FMTu__: &'static [u8; 4usize] = b"llu\x00";
pub const __UINT64_FMTx__: &'static [u8; 4usize] = b"llx\x00";
pub const __UINT64_FMTX__: &'static [u8; 4usize] = b"llX\x00";
pub const __UINT64_MAX__: ::std::os::raw::c_int = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_FAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uint = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uint = 1;
pub const __PIC__: ::std::os::raw::c_uint = 2;
pub const __pic__: ::std::os::raw::c_uint = 2;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uint = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uint = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __SSP__: ::std::os::raw::c_uint = 1;
pub const __amd64__: ::std::os::raw::c_uint = 1;
pub const __amd64: ::std::os::raw::c_uint = 1;
pub const __x86_64: ::std::os::raw::c_uint = 1;
pub const __x86_64__: ::std::os::raw::c_uint = 1;
pub const __core2: ::std::os::raw::c_uint = 1;
pub const __core2__: ::std::os::raw::c_uint = 1;
pub const __tune_core2__: ::std::os::raw::c_uint = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uint = 1;
pub const __FXSR__: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: ::std::os::raw::c_uint = 1;
pub const __SSSE3__: ::std::os::raw::c_uint = 1;
pub const __SSE3__: ::std::os::raw::c_uint = 1;
pub const __SSE2__: ::std::os::raw::c_uint = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uint = 1;
pub const __SSE__: ::std::os::raw::c_uint = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uint = 1;
pub const __MMX__: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uint = 1;
pub const __APPLE_CC__: ::std::os::raw::c_uint = 6000;
pub const __APPLE__: ::std::os::raw::c_uint = 1;
pub const OBJC_NEW_PROPERTIES: ::std::os::raw::c_uint = 1;
pub const __apple_build_version__: ::std::os::raw::c_uint = 8020042;
pub const __DYNAMIC__: ::std::os::raw::c_uint = 1;
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__:
          ::std::os::raw::c_uint =
    1090;
pub const __MACH__: ::std::os::raw::c_uint = 1;
pub const __STDC__: ::std::os::raw::c_uint = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uint = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uint = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uint = 1;
pub const __ANDROID__: ::std::os::raw::c_uint = 1;
pub const WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT32_MIN: ::std::os::raw::c_uint = 0;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const WINT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const WINT_MIN: ::std::os::raw::c_int = -2147483648;
pub const __POSIX_VISIBLE: ::std::os::raw::c_uint = 200809;
pub const __XSI_VISIBLE: ::std::os::raw::c_uint = 700;
pub const __BSD_VISIBLE: ::std::os::raw::c_uint = 1;
pub const __ISO_C_VISIBLE: ::std::os::raw::c_uint = 1999;
pub const __XPG_VISIBLE: ::std::os::raw::c_uint = 700;
pub const __BIONIC__: ::std::os::raw::c_uint = 1;
pub const __ANDROID_API__: ::std::os::raw::c_uint = 21;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __PRI_64_prefix: &'static [u8; 2usize] = b"l\x00";
pub const __PRI_PTR_prefix: &'static [u8; 2usize] = b"l\x00";
pub const PRId8: &'static [u8; 2usize] = b"d\x00";
pub const PRId16: &'static [u8; 2usize] = b"d\x00";
pub const PRId32: &'static [u8; 2usize] = b"d\x00";
pub const PRId64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\x00";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const PRIi8: &'static [u8; 2usize] = b"i\x00";
pub const PRIi16: &'static [u8; 2usize] = b"i\x00";
pub const PRIi32: &'static [u8; 2usize] = b"i\x00";
pub const PRIi64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\x00";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\x00";
pub const PRIo8: &'static [u8; 2usize] = b"o\x00";
pub const PRIo16: &'static [u8; 2usize] = b"o\x00";
pub const PRIo32: &'static [u8; 2usize] = b"o\x00";
pub const PRIo64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\x00";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const PRIu8: &'static [u8; 2usize] = b"u\x00";
pub const PRIu16: &'static [u8; 2usize] = b"u\x00";
pub const PRIu32: &'static [u8; 2usize] = b"u\x00";
pub const PRIu64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\x00";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const PRIx8: &'static [u8; 2usize] = b"x\x00";
pub const PRIx16: &'static [u8; 2usize] = b"x\x00";
pub const PRIx32: &'static [u8; 2usize] = b"x\x00";
pub const PRIx64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\x00";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\x00";
pub const PRIX8: &'static [u8; 2usize] = b"X\x00";
pub const PRIX16: &'static [u8; 2usize] = b"X\x00";
pub const PRIX32: &'static [u8; 2usize] = b"X\x00";
pub const PRIX64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\x00";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\x00";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNd16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNd32: &'static [u8; 2usize] = b"d\x00";
pub const SCNd64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdFAST16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\x00";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNi16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNi32: &'static [u8; 2usize] = b"i\x00";
pub const SCNi64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiFAST16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\x00";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\x00";
pub const SCNo8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNo16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNo32: &'static [u8; 2usize] = b"o\x00";
pub const SCNo64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoFAST16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\x00";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNu16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNu32: &'static [u8; 2usize] = b"u\x00";
pub const SCNu64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuFAST16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\x00";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNx16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNx32: &'static [u8; 2usize] = b"x\x00";
pub const SCNx64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxFAST16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\x00";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\x00";
pub const ALC_INVALID: ::std::os::raw::c_uint = 0;
pub const ALC_VERSION_0_1: ::std::os::raw::c_uint = 1;
pub const ALC_FALSE: ::std::os::raw::c_uint = 0;
pub const ALC_TRUE: ::std::os::raw::c_uint = 1;
pub const ALC_FREQUENCY: ::std::os::raw::c_uint = 4103;
pub const ALC_REFRESH: ::std::os::raw::c_uint = 4104;
pub const ALC_SYNC: ::std::os::raw::c_uint = 4105;
pub const ALC_MONO_SOURCES: ::std::os::raw::c_uint = 4112;
pub const ALC_STEREO_SOURCES: ::std::os::raw::c_uint = 4113;
pub const ALC_NO_ERROR: ::std::os::raw::c_uint = 0;
pub const ALC_INVALID_DEVICE: ::std::os::raw::c_uint = 40961;
pub const ALC_INVALID_CONTEXT: ::std::os::raw::c_uint = 40962;
pub const ALC_INVALID_ENUM: ::std::os::raw::c_uint = 40963;
pub const ALC_INVALID_VALUE: ::std::os::raw::c_uint = 40964;
pub const ALC_OUT_OF_MEMORY: ::std::os::raw::c_uint = 40965;
pub const ALC_MAJOR_VERSION: ::std::os::raw::c_uint = 4096;
pub const ALC_MINOR_VERSION: ::std::os::raw::c_uint = 4097;
pub const ALC_ATTRIBUTES_SIZE: ::std::os::raw::c_uint = 4098;
pub const ALC_ALL_ATTRIBUTES: ::std::os::raw::c_uint = 4099;
pub const ALC_DEFAULT_DEVICE_SPECIFIER: ::std::os::raw::c_uint = 4100;
pub const ALC_DEVICE_SPECIFIER: ::std::os::raw::c_uint = 4101;
pub const ALC_EXTENSIONS: ::std::os::raw::c_uint = 4102;
pub const ALC_EXT_CAPTURE: ::std::os::raw::c_uint = 1;
pub const ALC_CAPTURE_DEVICE_SPECIFIER: ::std::os::raw::c_uint = 784;
pub const ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER: ::std::os::raw::c_uint = 785;
pub const ALC_CAPTURE_SAMPLES: ::std::os::raw::c_uint = 786;
pub const ALC_ENUMERATE_ALL_EXT: ::std::os::raw::c_uint = 1;
pub const ALC_DEFAULT_ALL_DEVICES_SPECIFIER: ::std::os::raw::c_uint = 4114;
pub const ALC_ALL_DEVICES_SPECIFIER: ::std::os::raw::c_uint = 4115;
pub const AL_INVALID: ::std::os::raw::c_int = -1;
pub const AL_NONE: ::std::os::raw::c_uint = 0;
pub const AL_FALSE: ::std::os::raw::c_uint = 0;
pub const AL_TRUE: ::std::os::raw::c_uint = 1;
pub const AL_SOURCE_RELATIVE: ::std::os::raw::c_uint = 514;
pub const AL_CONE_INNER_ANGLE: ::std::os::raw::c_uint = 4097;
pub const AL_CONE_OUTER_ANGLE: ::std::os::raw::c_uint = 4098;
pub const AL_PITCH: ::std::os::raw::c_uint = 4099;
pub const AL_POSITION: ::std::os::raw::c_uint = 4100;
pub const AL_DIRECTION: ::std::os::raw::c_uint = 4101;
pub const AL_VELOCITY: ::std::os::raw::c_uint = 4102;
pub const AL_LOOPING: ::std::os::raw::c_uint = 4103;
pub const AL_BUFFER: ::std::os::raw::c_uint = 4105;
pub const AL_GAIN: ::std::os::raw::c_uint = 4106;
pub const AL_MIN_GAIN: ::std::os::raw::c_uint = 4109;
pub const AL_MAX_GAIN: ::std::os::raw::c_uint = 4110;
pub const AL_ORIENTATION: ::std::os::raw::c_uint = 4111;
pub const AL_SOURCE_STATE: ::std::os::raw::c_uint = 4112;
pub const AL_INITIAL: ::std::os::raw::c_uint = 4113;
pub const AL_PLAYING: ::std::os::raw::c_uint = 4114;
pub const AL_PAUSED: ::std::os::raw::c_uint = 4115;
pub const AL_STOPPED: ::std::os::raw::c_uint = 4116;
pub const AL_BUFFERS_QUEUED: ::std::os::raw::c_uint = 4117;
pub const AL_BUFFERS_PROCESSED: ::std::os::raw::c_uint = 4118;
pub const AL_REFERENCE_DISTANCE: ::std::os::raw::c_uint = 4128;
pub const AL_ROLLOFF_FACTOR: ::std::os::raw::c_uint = 4129;
pub const AL_CONE_OUTER_GAIN: ::std::os::raw::c_uint = 4130;
pub const AL_MAX_DISTANCE: ::std::os::raw::c_uint = 4131;
pub const AL_SEC_OFFSET: ::std::os::raw::c_uint = 4132;
pub const AL_SAMPLE_OFFSET: ::std::os::raw::c_uint = 4133;
pub const AL_BYTE_OFFSET: ::std::os::raw::c_uint = 4134;
pub const AL_SOURCE_TYPE: ::std::os::raw::c_uint = 4135;
pub const AL_STATIC: ::std::os::raw::c_uint = 4136;
pub const AL_STREAMING: ::std::os::raw::c_uint = 4137;
pub const AL_UNDETERMINED: ::std::os::raw::c_uint = 4144;
pub const AL_FORMAT_MONO8: ::std::os::raw::c_uint = 4352;
pub const AL_FORMAT_MONO16: ::std::os::raw::c_uint = 4353;
pub const AL_FORMAT_STEREO8: ::std::os::raw::c_uint = 4354;
pub const AL_FORMAT_STEREO16: ::std::os::raw::c_uint = 4355;
pub const AL_FREQUENCY: ::std::os::raw::c_uint = 8193;
pub const AL_BITS: ::std::os::raw::c_uint = 8194;
pub const AL_CHANNELS: ::std::os::raw::c_uint = 8195;
pub const AL_SIZE: ::std::os::raw::c_uint = 8196;
pub const AL_UNUSED: ::std::os::raw::c_uint = 8208;
pub const AL_PENDING: ::std::os::raw::c_uint = 8209;
pub const AL_PROCESSED: ::std::os::raw::c_uint = 8210;
pub const AL_NO_ERROR: ::std::os::raw::c_uint = 0;
pub const AL_INVALID_NAME: ::std::os::raw::c_uint = 40961;
pub const AL_INVALID_ENUM: ::std::os::raw::c_uint = 40962;
pub const AL_INVALID_VALUE: ::std::os::raw::c_uint = 40963;
pub const AL_INVALID_OPERATION: ::std::os::raw::c_uint = 40964;
pub const AL_OUT_OF_MEMORY: ::std::os::raw::c_uint = 40965;
pub const AL_VENDOR: ::std::os::raw::c_uint = 45057;
pub const AL_VERSION: ::std::os::raw::c_uint = 45058;
pub const AL_RENDERER: ::std::os::raw::c_uint = 45059;
pub const AL_EXTENSIONS: ::std::os::raw::c_uint = 45060;
pub const AL_INVERSE_DISTANCE: ::std::os::raw::c_uint = 53249;
pub const AL_INVERSE_DISTANCE_CLAMPED: ::std::os::raw::c_uint = 53250;
pub const AL_LINEAR_DISTANCE: ::std::os::raw::c_uint = 53251;
pub const AL_LINEAR_DISTANCE_CLAMPED: ::std::os::raw::c_uint = 53252;
pub const AL_EXPONENT_DISTANCE: ::std::os::raw::c_uint = 53253;
pub const AL_EXPONENT_DISTANCE_CLAMPED: ::std::os::raw::c_uint = 53254;
pub const AL_LOKI_IMA_ADPCM_format: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_IMA_ADPCM_MONO16_EXT: ::std::os::raw::c_uint = 65536;
pub const AL_FORMAT_IMA_ADPCM_STEREO16_EXT: ::std::os::raw::c_uint = 65537;
pub const AL_LOKI_WAVE_format: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_WAVE_EXT: ::std::os::raw::c_uint = 65538;
pub const AL_EXT_vorbis: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_VORBIS_EXT: ::std::os::raw::c_uint = 65539;
pub const AL_LOKI_quadriphonic: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_QUAD8_LOKI: ::std::os::raw::c_uint = 65540;
pub const AL_FORMAT_QUAD16_LOKI: ::std::os::raw::c_uint = 65541;
pub const AL_EXT_float32: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_MONO_FLOAT32: ::std::os::raw::c_uint = 65552;
pub const AL_FORMAT_STEREO_FLOAT32: ::std::os::raw::c_uint = 65553;
pub const AL_EXT_double: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_MONO_DOUBLE_EXT: ::std::os::raw::c_uint = 65554;
pub const AL_FORMAT_STEREO_DOUBLE_EXT: ::std::os::raw::c_uint = 65555;
pub const AL_EXT_MULAW: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_MONO_MULAW_EXT: ::std::os::raw::c_uint = 65556;
pub const AL_FORMAT_STEREO_MULAW_EXT: ::std::os::raw::c_uint = 65557;
pub const AL_EXT_ALAW: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_MONO_ALAW_EXT: ::std::os::raw::c_uint = 65558;
pub const AL_FORMAT_STEREO_ALAW_EXT: ::std::os::raw::c_uint = 65559;
pub const ALC_LOKI_audio_channel: ::std::os::raw::c_uint = 1;
pub const ALC_CHAN_MAIN_LOKI: ::std::os::raw::c_uint = 5242881;
pub const ALC_CHAN_PCM_LOKI: ::std::os::raw::c_uint = 5242882;
pub const ALC_CHAN_CD_LOKI: ::std::os::raw::c_uint = 5242883;
pub const AL_EXT_MCFORMATS: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_QUAD8: ::std::os::raw::c_uint = 4612;
pub const AL_FORMAT_QUAD16: ::std::os::raw::c_uint = 4613;
pub const AL_FORMAT_QUAD32: ::std::os::raw::c_uint = 4614;
pub const AL_FORMAT_REAR8: ::std::os::raw::c_uint = 4615;
pub const AL_FORMAT_REAR16: ::std::os::raw::c_uint = 4616;
pub const AL_FORMAT_REAR32: ::std::os::raw::c_uint = 4617;
pub const AL_FORMAT_51CHN8: ::std::os::raw::c_uint = 4618;
pub const AL_FORMAT_51CHN16: ::std::os::raw::c_uint = 4619;
pub const AL_FORMAT_51CHN32: ::std::os::raw::c_uint = 4620;
pub const AL_FORMAT_61CHN8: ::std::os::raw::c_uint = 4621;
pub const AL_FORMAT_61CHN16: ::std::os::raw::c_uint = 4622;
pub const AL_FORMAT_61CHN32: ::std::os::raw::c_uint = 4623;
pub const AL_FORMAT_71CHN8: ::std::os::raw::c_uint = 4624;
pub const AL_FORMAT_71CHN16: ::std::os::raw::c_uint = 4625;
pub const AL_FORMAT_71CHN32: ::std::os::raw::c_uint = 4626;
pub const AL_EXT_MULAW_MCFORMATS: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_MONO_MULAW: ::std::os::raw::c_uint = 65556;
pub const AL_FORMAT_STEREO_MULAW: ::std::os::raw::c_uint = 65557;
pub const AL_FORMAT_QUAD_MULAW: ::std::os::raw::c_uint = 65569;
pub const AL_FORMAT_REAR_MULAW: ::std::os::raw::c_uint = 65570;
pub const AL_FORMAT_51CHN_MULAW: ::std::os::raw::c_uint = 65571;
pub const AL_FORMAT_61CHN_MULAW: ::std::os::raw::c_uint = 65572;
pub const AL_FORMAT_71CHN_MULAW: ::std::os::raw::c_uint = 65573;
pub const AL_EXT_IMA4: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_MONO_IMA4: ::std::os::raw::c_uint = 4864;
pub const AL_FORMAT_STEREO_IMA4: ::std::os::raw::c_uint = 4865;
pub const AL_EXT_STATIC_BUFFER: ::std::os::raw::c_uint = 1;
pub const ALC_EXT_EFX: ::std::os::raw::c_uint = 1;
pub const ALC_EXT_EFX_NAME: &'static [u8; 12usize] = b"ALC_EXT_EFX\x00";
pub const ALC_EFX_MAJOR_VERSION: ::std::os::raw::c_uint = 131073;
pub const ALC_EFX_MINOR_VERSION: ::std::os::raw::c_uint = 131074;
pub const ALC_MAX_AUXILIARY_SENDS: ::std::os::raw::c_uint = 131075;
pub const AL_METERS_PER_UNIT: ::std::os::raw::c_uint = 131076;
pub const AL_DIRECT_FILTER: ::std::os::raw::c_uint = 131077;
pub const AL_AUXILIARY_SEND_FILTER: ::std::os::raw::c_uint = 131078;
pub const AL_AIR_ABSORPTION_FACTOR: ::std::os::raw::c_uint = 131079;
pub const AL_ROOM_ROLLOFF_FACTOR: ::std::os::raw::c_uint = 131080;
pub const AL_CONE_OUTER_GAINHF: ::std::os::raw::c_uint = 131081;
pub const AL_DIRECT_FILTER_GAINHF_AUTO: ::std::os::raw::c_uint = 131082;
pub const AL_AUXILIARY_SEND_FILTER_GAIN_AUTO: ::std::os::raw::c_uint = 131083;
pub const AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO: ::std::os::raw::c_uint =
    131084;
pub const AL_REVERB_DENSITY: ::std::os::raw::c_uint = 1;
pub const AL_REVERB_DIFFUSION: ::std::os::raw::c_uint = 2;
pub const AL_REVERB_GAIN: ::std::os::raw::c_uint = 3;
pub const AL_REVERB_GAINHF: ::std::os::raw::c_uint = 4;
pub const AL_REVERB_DECAY_TIME: ::std::os::raw::c_uint = 5;
pub const AL_REVERB_DECAY_HFRATIO: ::std::os::raw::c_uint = 6;
pub const AL_REVERB_REFLECTIONS_GAIN: ::std::os::raw::c_uint = 7;
pub const AL_REVERB_REFLECTIONS_DELAY: ::std::os::raw::c_uint = 8;
pub const AL_REVERB_LATE_REVERB_GAIN: ::std::os::raw::c_uint = 9;
pub const AL_REVERB_LATE_REVERB_DELAY: ::std::os::raw::c_uint = 10;
pub const AL_REVERB_AIR_ABSORPTION_GAINHF: ::std::os::raw::c_uint = 11;
pub const AL_REVERB_ROOM_ROLLOFF_FACTOR: ::std::os::raw::c_uint = 12;
pub const AL_REVERB_DECAY_HFLIMIT: ::std::os::raw::c_uint = 13;
pub const AL_EAXREVERB_DENSITY: ::std::os::raw::c_uint = 1;
pub const AL_EAXREVERB_DIFFUSION: ::std::os::raw::c_uint = 2;
pub const AL_EAXREVERB_GAIN: ::std::os::raw::c_uint = 3;
pub const AL_EAXREVERB_GAINHF: ::std::os::raw::c_uint = 4;
pub const AL_EAXREVERB_GAINLF: ::std::os::raw::c_uint = 5;
pub const AL_EAXREVERB_DECAY_TIME: ::std::os::raw::c_uint = 6;
pub const AL_EAXREVERB_DECAY_HFRATIO: ::std::os::raw::c_uint = 7;
pub const AL_EAXREVERB_DECAY_LFRATIO: ::std::os::raw::c_uint = 8;
pub const AL_EAXREVERB_REFLECTIONS_GAIN: ::std::os::raw::c_uint = 9;
pub const AL_EAXREVERB_REFLECTIONS_DELAY: ::std::os::raw::c_uint = 10;
pub const AL_EAXREVERB_REFLECTIONS_PAN: ::std::os::raw::c_uint = 11;
pub const AL_EAXREVERB_LATE_REVERB_GAIN: ::std::os::raw::c_uint = 12;
pub const AL_EAXREVERB_LATE_REVERB_DELAY: ::std::os::raw::c_uint = 13;
pub const AL_EAXREVERB_LATE_REVERB_PAN: ::std::os::raw::c_uint = 14;
pub const AL_EAXREVERB_ECHO_TIME: ::std::os::raw::c_uint = 15;
pub const AL_EAXREVERB_ECHO_DEPTH: ::std::os::raw::c_uint = 16;
pub const AL_EAXREVERB_MODULATION_TIME: ::std::os::raw::c_uint = 17;
pub const AL_EAXREVERB_MODULATION_DEPTH: ::std::os::raw::c_uint = 18;
pub const AL_EAXREVERB_AIR_ABSORPTION_GAINHF: ::std::os::raw::c_uint = 19;
pub const AL_EAXREVERB_HFREFERENCE: ::std::os::raw::c_uint = 20;
pub const AL_EAXREVERB_LFREFERENCE: ::std::os::raw::c_uint = 21;
pub const AL_EAXREVERB_ROOM_ROLLOFF_FACTOR: ::std::os::raw::c_uint = 22;
pub const AL_EAXREVERB_DECAY_HFLIMIT: ::std::os::raw::c_uint = 23;
pub const AL_CHORUS_WAVEFORM: ::std::os::raw::c_uint = 1;
pub const AL_CHORUS_PHASE: ::std::os::raw::c_uint = 2;
pub const AL_CHORUS_RATE: ::std::os::raw::c_uint = 3;
pub const AL_CHORUS_DEPTH: ::std::os::raw::c_uint = 4;
pub const AL_CHORUS_FEEDBACK: ::std::os::raw::c_uint = 5;
pub const AL_CHORUS_DELAY: ::std::os::raw::c_uint = 6;
pub const AL_DISTORTION_EDGE: ::std::os::raw::c_uint = 1;
pub const AL_DISTORTION_GAIN: ::std::os::raw::c_uint = 2;
pub const AL_DISTORTION_LOWPASS_CUTOFF: ::std::os::raw::c_uint = 3;
pub const AL_DISTORTION_EQCENTER: ::std::os::raw::c_uint = 4;
pub const AL_DISTORTION_EQBANDWIDTH: ::std::os::raw::c_uint = 5;
pub const AL_ECHO_DELAY: ::std::os::raw::c_uint = 1;
pub const AL_ECHO_LRDELAY: ::std::os::raw::c_uint = 2;
pub const AL_ECHO_DAMPING: ::std::os::raw::c_uint = 3;
pub const AL_ECHO_FEEDBACK: ::std::os::raw::c_uint = 4;
pub const AL_ECHO_SPREAD: ::std::os::raw::c_uint = 5;
pub const AL_FLANGER_WAVEFORM: ::std::os::raw::c_uint = 1;
pub const AL_FLANGER_PHASE: ::std::os::raw::c_uint = 2;
pub const AL_FLANGER_RATE: ::std::os::raw::c_uint = 3;
pub const AL_FLANGER_DEPTH: ::std::os::raw::c_uint = 4;
pub const AL_FLANGER_FEEDBACK: ::std::os::raw::c_uint = 5;
pub const AL_FLANGER_DELAY: ::std::os::raw::c_uint = 6;
pub const AL_FREQUENCY_SHIFTER_FREQUENCY: ::std::os::raw::c_uint = 1;
pub const AL_FREQUENCY_SHIFTER_LEFT_DIRECTION: ::std::os::raw::c_uint = 2;
pub const AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION: ::std::os::raw::c_uint = 3;
pub const AL_VOCAL_MORPHER_PHONEMEA: ::std::os::raw::c_uint = 1;
pub const AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING: ::std::os::raw::c_uint = 2;
pub const AL_VOCAL_MORPHER_PHONEMEB: ::std::os::raw::c_uint = 3;
pub const AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING: ::std::os::raw::c_uint = 4;
pub const AL_VOCAL_MORPHER_WAVEFORM: ::std::os::raw::c_uint = 5;
pub const AL_VOCAL_MORPHER_RATE: ::std::os::raw::c_uint = 6;
pub const AL_PITCH_SHIFTER_COARSE_TUNE: ::std::os::raw::c_uint = 1;
pub const AL_PITCH_SHIFTER_FINE_TUNE: ::std::os::raw::c_uint = 2;
pub const AL_RING_MODULATOR_FREQUENCY: ::std::os::raw::c_uint = 1;
pub const AL_RING_MODULATOR_HIGHPASS_CUTOFF: ::std::os::raw::c_uint = 2;
pub const AL_RING_MODULATOR_WAVEFORM: ::std::os::raw::c_uint = 3;
pub const AL_AUTOWAH_ATTACK_TIME: ::std::os::raw::c_uint = 1;
pub const AL_AUTOWAH_RELEASE_TIME: ::std::os::raw::c_uint = 2;
pub const AL_AUTOWAH_RESONANCE: ::std::os::raw::c_uint = 3;
pub const AL_AUTOWAH_PEAK_GAIN: ::std::os::raw::c_uint = 4;
pub const AL_COMPRESSOR_ONOFF: ::std::os::raw::c_uint = 1;
pub const AL_EQUALIZER_LOW_GAIN: ::std::os::raw::c_uint = 1;
pub const AL_EQUALIZER_LOW_CUTOFF: ::std::os::raw::c_uint = 2;
pub const AL_EQUALIZER_MID1_GAIN: ::std::os::raw::c_uint = 3;
pub const AL_EQUALIZER_MID1_CENTER: ::std::os::raw::c_uint = 4;
pub const AL_EQUALIZER_MID1_WIDTH: ::std::os::raw::c_uint = 5;
pub const AL_EQUALIZER_MID2_GAIN: ::std::os::raw::c_uint = 6;
pub const AL_EQUALIZER_MID2_CENTER: ::std::os::raw::c_uint = 7;
pub const AL_EQUALIZER_MID2_WIDTH: ::std::os::raw::c_uint = 8;
pub const AL_EQUALIZER_HIGH_GAIN: ::std::os::raw::c_uint = 9;
pub const AL_EQUALIZER_HIGH_CUTOFF: ::std::os::raw::c_uint = 10;
pub const AL_EFFECT_FIRST_PARAMETER: ::std::os::raw::c_uint = 0;
pub const AL_EFFECT_LAST_PARAMETER: ::std::os::raw::c_uint = 32768;
pub const AL_EFFECT_TYPE: ::std::os::raw::c_uint = 32769;
pub const AL_EFFECT_NULL: ::std::os::raw::c_uint = 0;
pub const AL_EFFECT_REVERB: ::std::os::raw::c_uint = 1;
pub const AL_EFFECT_CHORUS: ::std::os::raw::c_uint = 2;
pub const AL_EFFECT_DISTORTION: ::std::os::raw::c_uint = 3;
pub const AL_EFFECT_ECHO: ::std::os::raw::c_uint = 4;
pub const AL_EFFECT_FLANGER: ::std::os::raw::c_uint = 5;
pub const AL_EFFECT_FREQUENCY_SHIFTER: ::std::os::raw::c_uint = 6;
pub const AL_EFFECT_VOCAL_MORPHER: ::std::os::raw::c_uint = 7;
pub const AL_EFFECT_PITCH_SHIFTER: ::std::os::raw::c_uint = 8;
pub const AL_EFFECT_RING_MODULATOR: ::std::os::raw::c_uint = 9;
pub const AL_EFFECT_AUTOWAH: ::std::os::raw::c_uint = 10;
pub const AL_EFFECT_COMPRESSOR: ::std::os::raw::c_uint = 11;
pub const AL_EFFECT_EQUALIZER: ::std::os::raw::c_uint = 12;
pub const AL_EFFECT_EAXREVERB: ::std::os::raw::c_uint = 32768;
pub const AL_EFFECTSLOT_EFFECT: ::std::os::raw::c_uint = 1;
pub const AL_EFFECTSLOT_GAIN: ::std::os::raw::c_uint = 2;
pub const AL_EFFECTSLOT_AUXILIARY_SEND_AUTO: ::std::os::raw::c_uint = 3;
pub const AL_EFFECTSLOT_NULL: ::std::os::raw::c_uint = 0;
pub const AL_LOWPASS_GAIN: ::std::os::raw::c_uint = 1;
pub const AL_LOWPASS_GAINHF: ::std::os::raw::c_uint = 2;
pub const AL_HIGHPASS_GAIN: ::std::os::raw::c_uint = 1;
pub const AL_HIGHPASS_GAINLF: ::std::os::raw::c_uint = 2;
pub const AL_BANDPASS_GAIN: ::std::os::raw::c_uint = 1;
pub const AL_BANDPASS_GAINLF: ::std::os::raw::c_uint = 2;
pub const AL_BANDPASS_GAINHF: ::std::os::raw::c_uint = 3;
pub const AL_FILTER_FIRST_PARAMETER: ::std::os::raw::c_uint = 0;
pub const AL_FILTER_LAST_PARAMETER: ::std::os::raw::c_uint = 32768;
pub const AL_FILTER_TYPE: ::std::os::raw::c_uint = 32769;
pub const AL_FILTER_NULL: ::std::os::raw::c_uint = 0;
pub const AL_FILTER_LOWPASS: ::std::os::raw::c_uint = 1;
pub const AL_FILTER_HIGHPASS: ::std::os::raw::c_uint = 2;
pub const AL_FILTER_BANDPASS: ::std::os::raw::c_uint = 3;
pub const AL_LOWPASS_MIN_GAIN: f64 = 0.;
pub const AL_LOWPASS_MAX_GAIN: f64 = 1.;
pub const AL_LOWPASS_DEFAULT_GAIN: f64 = 1.;
pub const AL_LOWPASS_MIN_GAINHF: f64 = 0.;
pub const AL_LOWPASS_MAX_GAINHF: f64 = 1.;
pub const AL_LOWPASS_DEFAULT_GAINHF: f64 = 1.;
pub const AL_HIGHPASS_MIN_GAIN: f64 = 0.;
pub const AL_HIGHPASS_MAX_GAIN: f64 = 1.;
pub const AL_HIGHPASS_DEFAULT_GAIN: f64 = 1.;
pub const AL_HIGHPASS_MIN_GAINLF: f64 = 0.;
pub const AL_HIGHPASS_MAX_GAINLF: f64 = 1.;
pub const AL_HIGHPASS_DEFAULT_GAINLF: f64 = 1.;
pub const AL_BANDPASS_MIN_GAIN: f64 = 0.;
pub const AL_BANDPASS_MAX_GAIN: f64 = 1.;
pub const AL_BANDPASS_DEFAULT_GAIN: f64 = 1.;
pub const AL_BANDPASS_MIN_GAINHF: f64 = 0.;
pub const AL_BANDPASS_MAX_GAINHF: f64 = 1.;
pub const AL_BANDPASS_DEFAULT_GAINHF: f64 = 1.;
pub const AL_BANDPASS_MIN_GAINLF: f64 = 0.;
pub const AL_BANDPASS_MAX_GAINLF: f64 = 1.;
pub const AL_BANDPASS_DEFAULT_GAINLF: f64 = 1.;
pub const AL_REVERB_MIN_DENSITY: f64 = 0.;
pub const AL_REVERB_MAX_DENSITY: f64 = 1.;
pub const AL_REVERB_DEFAULT_DENSITY: f64 = 1.;
pub const AL_REVERB_MIN_DIFFUSION: f64 = 0.;
pub const AL_REVERB_MAX_DIFFUSION: f64 = 1.;
pub const AL_REVERB_DEFAULT_DIFFUSION: f64 = 1.;
pub const AL_REVERB_MIN_GAIN: f64 = 0.;
pub const AL_REVERB_MAX_GAIN: f64 = 1.;
pub const AL_REVERB_DEFAULT_GAIN: f64 = 0.32;
pub const AL_REVERB_MIN_GAINHF: f64 = 0.;
pub const AL_REVERB_MAX_GAINHF: f64 = 1.;
pub const AL_REVERB_DEFAULT_GAINHF: f64 = 0.89;
pub const AL_REVERB_MIN_DECAY_TIME: f64 = 0.1;
pub const AL_REVERB_MAX_DECAY_TIME: f64 = 20.;
pub const AL_REVERB_DEFAULT_DECAY_TIME: f64 = 1.49;
pub const AL_REVERB_MIN_DECAY_HFRATIO: f64 = 0.1;
pub const AL_REVERB_MAX_DECAY_HFRATIO: f64 = 2.;
pub const AL_REVERB_DEFAULT_DECAY_HFRATIO: f64 = 0.83;
pub const AL_REVERB_MIN_REFLECTIONS_GAIN: f64 = 0.;
pub const AL_REVERB_MAX_REFLECTIONS_GAIN: f64 = 3.16;
pub const AL_REVERB_DEFAULT_REFLECTIONS_GAIN: f64 = 0.05;
pub const AL_REVERB_MIN_REFLECTIONS_DELAY: f64 = 0.;
pub const AL_REVERB_MAX_REFLECTIONS_DELAY: f64 = 0.3;
pub const AL_REVERB_DEFAULT_REFLECTIONS_DELAY: f64 = 0.007;
pub const AL_REVERB_MIN_LATE_REVERB_GAIN: f64 = 0.;
pub const AL_REVERB_MAX_LATE_REVERB_GAIN: f64 = 10.;
pub const AL_REVERB_DEFAULT_LATE_REVERB_GAIN: f64 = 1.26;
pub const AL_REVERB_MIN_LATE_REVERB_DELAY: f64 = 0.;
pub const AL_REVERB_MAX_LATE_REVERB_DELAY: f64 = 0.1;
pub const AL_REVERB_DEFAULT_LATE_REVERB_DELAY: f64 = 0.011;
pub const AL_REVERB_MIN_AIR_ABSORPTION_GAINHF: f64 = 0.892;
pub const AL_REVERB_MAX_AIR_ABSORPTION_GAINHF: f64 = 1.;
pub const AL_REVERB_DEFAULT_AIR_ABSORPTION_GAINHF: f64 = 0.994;
pub const AL_REVERB_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.;
pub const AL_REVERB_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.;
pub const AL_REVERB_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.;
pub const AL_REVERB_MIN_DECAY_HFLIMIT: ::std::os::raw::c_uint = 0;
pub const AL_REVERB_MAX_DECAY_HFLIMIT: ::std::os::raw::c_uint = 1;
pub const AL_REVERB_DEFAULT_DECAY_HFLIMIT: ::std::os::raw::c_uint = 1;
pub const AL_EAXREVERB_MIN_DENSITY: f64 = 0.;
pub const AL_EAXREVERB_MAX_DENSITY: f64 = 1.;
pub const AL_EAXREVERB_DEFAULT_DENSITY: f64 = 1.;
pub const AL_EAXREVERB_MIN_DIFFUSION: f64 = 0.;
pub const AL_EAXREVERB_MAX_DIFFUSION: f64 = 1.;
pub const AL_EAXREVERB_DEFAULT_DIFFUSION: f64 = 1.;
pub const AL_EAXREVERB_MIN_GAIN: f64 = 0.;
pub const AL_EAXREVERB_MAX_GAIN: f64 = 1.;
pub const AL_EAXREVERB_DEFAULT_GAIN: f64 = 0.32;
pub const AL_EAXREVERB_MIN_GAINHF: f64 = 0.;
pub const AL_EAXREVERB_MAX_GAINHF: f64 = 1.;
pub const AL_EAXREVERB_DEFAULT_GAINHF: f64 = 0.89;
pub const AL_EAXREVERB_MIN_GAINLF: f64 = 0.;
pub const AL_EAXREVERB_MAX_GAINLF: f64 = 1.;
pub const AL_EAXREVERB_DEFAULT_GAINLF: f64 = 1.;
pub const AL_EAXREVERB_MIN_DECAY_TIME: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_TIME: f64 = 20.;
pub const AL_EAXREVERB_DEFAULT_DECAY_TIME: f64 = 1.49;
pub const AL_EAXREVERB_MIN_DECAY_HFRATIO: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_HFRATIO: f64 = 2.;
pub const AL_EAXREVERB_DEFAULT_DECAY_HFRATIO: f64 = 0.83;
pub const AL_EAXREVERB_MIN_DECAY_LFRATIO: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_LFRATIO: f64 = 2.;
pub const AL_EAXREVERB_DEFAULT_DECAY_LFRATIO: f64 = 1.;
pub const AL_EAXREVERB_MIN_REFLECTIONS_GAIN: f64 = 0.;
pub const AL_EAXREVERB_MAX_REFLECTIONS_GAIN: f64 = 3.16;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_GAIN: f64 = 0.05;
pub const AL_EAXREVERB_MIN_REFLECTIONS_DELAY: f64 = 0.;
pub const AL_EAXREVERB_MAX_REFLECTIONS_DELAY: f64 = 0.3;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_DELAY: f64 = 0.007;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_PAN_XYZ: f64 = 0.;
pub const AL_EAXREVERB_MIN_LATE_REVERB_GAIN: f64 = 0.;
pub const AL_EAXREVERB_MAX_LATE_REVERB_GAIN: f64 = 10.;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_GAIN: f64 = 1.26;
pub const AL_EAXREVERB_MIN_LATE_REVERB_DELAY: f64 = 0.;
pub const AL_EAXREVERB_MAX_LATE_REVERB_DELAY: f64 = 0.1;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_DELAY: f64 = 0.011;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_PAN_XYZ: f64 = 0.;
pub const AL_EAXREVERB_MIN_ECHO_TIME: f64 = 0.075;
pub const AL_EAXREVERB_MAX_ECHO_TIME: f64 = 0.25;
pub const AL_EAXREVERB_DEFAULT_ECHO_TIME: f64 = 0.25;
pub const AL_EAXREVERB_MIN_ECHO_DEPTH: f64 = 0.;
pub const AL_EAXREVERB_MAX_ECHO_DEPTH: f64 = 1.;
pub const AL_EAXREVERB_DEFAULT_ECHO_DEPTH: f64 = 0.;
pub const AL_EAXREVERB_MIN_MODULATION_TIME: f64 = 0.04;
pub const AL_EAXREVERB_MAX_MODULATION_TIME: f64 = 4.;
pub const AL_EAXREVERB_DEFAULT_MODULATION_TIME: f64 = 0.25;
pub const AL_EAXREVERB_MIN_MODULATION_DEPTH: f64 = 0.;
pub const AL_EAXREVERB_MAX_MODULATION_DEPTH: f64 = 1.;
pub const AL_EAXREVERB_DEFAULT_MODULATION_DEPTH: f64 = 0.;
pub const AL_EAXREVERB_MIN_AIR_ABSORPTION_GAINHF: f64 = 0.892;
pub const AL_EAXREVERB_MAX_AIR_ABSORPTION_GAINHF: f64 = 1.;
pub const AL_EAXREVERB_DEFAULT_AIR_ABSORPTION_GAINHF: f64 = 0.994;
pub const AL_EAXREVERB_MIN_HFREFERENCE: f64 = 1000.;
pub const AL_EAXREVERB_MAX_HFREFERENCE: f64 = 20000.;
pub const AL_EAXREVERB_DEFAULT_HFREFERENCE: f64 = 5000.;
pub const AL_EAXREVERB_MIN_LFREFERENCE: f64 = 20.;
pub const AL_EAXREVERB_MAX_LFREFERENCE: f64 = 1000.;
pub const AL_EAXREVERB_DEFAULT_LFREFERENCE: f64 = 250.;
pub const AL_EAXREVERB_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.;
pub const AL_EAXREVERB_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.;
pub const AL_EAXREVERB_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.;
pub const AL_EAXREVERB_MIN_DECAY_HFLIMIT: ::std::os::raw::c_uint = 0;
pub const AL_EAXREVERB_MAX_DECAY_HFLIMIT: ::std::os::raw::c_uint = 1;
pub const AL_EAXREVERB_DEFAULT_DECAY_HFLIMIT: ::std::os::raw::c_uint = 1;
pub const AL_CHORUS_WAVEFORM_SINUSOID: ::std::os::raw::c_uint = 0;
pub const AL_CHORUS_WAVEFORM_TRIANGLE: ::std::os::raw::c_uint = 1;
pub const AL_CHORUS_MIN_WAVEFORM: ::std::os::raw::c_uint = 0;
pub const AL_CHORUS_MAX_WAVEFORM: ::std::os::raw::c_uint = 1;
pub const AL_CHORUS_DEFAULT_WAVEFORM: ::std::os::raw::c_uint = 1;
pub const AL_CHORUS_MIN_PHASE: ::std::os::raw::c_int = -180;
pub const AL_CHORUS_MAX_PHASE: ::std::os::raw::c_uint = 180;
pub const AL_CHORUS_DEFAULT_PHASE: ::std::os::raw::c_uint = 90;
pub const AL_CHORUS_MIN_RATE: f64 = 0.;
pub const AL_CHORUS_MAX_RATE: f64 = 10.;
pub const AL_CHORUS_DEFAULT_RATE: f64 = 1.1;
pub const AL_CHORUS_MIN_DEPTH: f64 = 0.;
pub const AL_CHORUS_MAX_DEPTH: f64 = 1.;
pub const AL_CHORUS_DEFAULT_DEPTH: f64 = 0.1;
pub const AL_CHORUS_MIN_FEEDBACK: f64 = -1.;
pub const AL_CHORUS_MAX_FEEDBACK: f64 = 1.;
pub const AL_CHORUS_DEFAULT_FEEDBACK: f64 = 0.25;
pub const AL_CHORUS_MIN_DELAY: f64 = 0.;
pub const AL_CHORUS_MAX_DELAY: f64 = 0.016;
pub const AL_CHORUS_DEFAULT_DELAY: f64 = 0.016;
pub const AL_DISTORTION_MIN_EDGE: f64 = 0.;
pub const AL_DISTORTION_MAX_EDGE: f64 = 1.;
pub const AL_DISTORTION_DEFAULT_EDGE: f64 = 0.2;
pub const AL_DISTORTION_MIN_GAIN: f64 = 0.01;
pub const AL_DISTORTION_MAX_GAIN: f64 = 1.;
pub const AL_DISTORTION_DEFAULT_GAIN: f64 = 0.05;
pub const AL_DISTORTION_MIN_LOWPASS_CUTOFF: f64 = 80.;
pub const AL_DISTORTION_MAX_LOWPASS_CUTOFF: f64 = 24000.;
pub const AL_DISTORTION_DEFAULT_LOWPASS_CUTOFF: f64 = 8000.;
pub const AL_DISTORTION_MIN_EQCENTER: f64 = 80.;
pub const AL_DISTORTION_MAX_EQCENTER: f64 = 24000.;
pub const AL_DISTORTION_DEFAULT_EQCENTER: f64 = 3600.;
pub const AL_DISTORTION_MIN_EQBANDWIDTH: f64 = 80.;
pub const AL_DISTORTION_MAX_EQBANDWIDTH: f64 = 24000.;
pub const AL_DISTORTION_DEFAULT_EQBANDWIDTH: f64 = 3600.;
pub const AL_ECHO_MIN_DELAY: f64 = 0.;
pub const AL_ECHO_MAX_DELAY: f64 = 0.207;
pub const AL_ECHO_DEFAULT_DELAY: f64 = 0.1;
pub const AL_ECHO_MIN_LRDELAY: f64 = 0.;
pub const AL_ECHO_MAX_LRDELAY: f64 = 0.404;
pub const AL_ECHO_DEFAULT_LRDELAY: f64 = 0.1;
pub const AL_ECHO_MIN_DAMPING: f64 = 0.;
pub const AL_ECHO_MAX_DAMPING: f64 = 0.99;
pub const AL_ECHO_DEFAULT_DAMPING: f64 = 0.5;
pub const AL_ECHO_MIN_FEEDBACK: f64 = 0.;
pub const AL_ECHO_MAX_FEEDBACK: f64 = 1.;
pub const AL_ECHO_DEFAULT_FEEDBACK: f64 = 0.5;
pub const AL_ECHO_MIN_SPREAD: f64 = -1.;
pub const AL_ECHO_MAX_SPREAD: f64 = 1.;
pub const AL_ECHO_DEFAULT_SPREAD: f64 = -1.;
pub const AL_FLANGER_WAVEFORM_SINUSOID: ::std::os::raw::c_uint = 0;
pub const AL_FLANGER_WAVEFORM_TRIANGLE: ::std::os::raw::c_uint = 1;
pub const AL_FLANGER_MIN_WAVEFORM: ::std::os::raw::c_uint = 0;
pub const AL_FLANGER_MAX_WAVEFORM: ::std::os::raw::c_uint = 1;
pub const AL_FLANGER_DEFAULT_WAVEFORM: ::std::os::raw::c_uint = 1;
pub const AL_FLANGER_MIN_PHASE: ::std::os::raw::c_int = -180;
pub const AL_FLANGER_MAX_PHASE: ::std::os::raw::c_uint = 180;
pub const AL_FLANGER_DEFAULT_PHASE: ::std::os::raw::c_uint = 0;
pub const AL_FLANGER_MIN_RATE: f64 = 0.;
pub const AL_FLANGER_MAX_RATE: f64 = 10.;
pub const AL_FLANGER_DEFAULT_RATE: f64 = 0.27;
pub const AL_FLANGER_MIN_DEPTH: f64 = 0.;
pub const AL_FLANGER_MAX_DEPTH: f64 = 1.;
pub const AL_FLANGER_DEFAULT_DEPTH: f64 = 1.;
pub const AL_FLANGER_MIN_FEEDBACK: f64 = -1.;
pub const AL_FLANGER_MAX_FEEDBACK: f64 = 1.;
pub const AL_FLANGER_DEFAULT_FEEDBACK: f64 = -0.5;
pub const AL_FLANGER_MIN_DELAY: f64 = 0.;
pub const AL_FLANGER_MAX_DELAY: f64 = 0.004;
pub const AL_FLANGER_DEFAULT_DELAY: f64 = 0.002;
pub const AL_FREQUENCY_SHIFTER_MIN_FREQUENCY: f64 = 0.;
pub const AL_FREQUENCY_SHIFTER_MAX_FREQUENCY: f64 = 24000.;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_FREQUENCY: f64 = 0.;
pub const AL_FREQUENCY_SHIFTER_MIN_LEFT_DIRECTION: ::std::os::raw::c_uint = 0;
pub const AL_FREQUENCY_SHIFTER_MAX_LEFT_DIRECTION: ::std::os::raw::c_uint = 2;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_LEFT_DIRECTION: ::std::os::raw::c_uint
          =
    0;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_DOWN: ::std::os::raw::c_uint = 0;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_UP: ::std::os::raw::c_uint = 1;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_OFF: ::std::os::raw::c_uint = 2;
pub const AL_FREQUENCY_SHIFTER_MIN_RIGHT_DIRECTION: ::std::os::raw::c_uint =
    0;
pub const AL_FREQUENCY_SHIFTER_MAX_RIGHT_DIRECTION: ::std::os::raw::c_uint =
    2;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_RIGHT_DIRECTION: ::std::os::raw::c_uint
          =
    0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEA: ::std::os::raw::c_uint = 0;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEA: ::std::os::raw::c_uint = 29;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEA: ::std::os::raw::c_uint = 0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEA_COARSE_TUNING: ::std::os::raw::c_int =
    -24;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEA_COARSE_TUNING: ::std::os::raw::c_uint
          =
    24;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEA_COARSE_TUNING:
          ::std::os::raw::c_uint =
    0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEB: ::std::os::raw::c_uint = 0;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEB: ::std::os::raw::c_uint = 29;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEB: ::std::os::raw::c_uint = 10;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEB_COARSE_TUNING: ::std::os::raw::c_int =
    -24;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEB_COARSE_TUNING: ::std::os::raw::c_uint
          =
    24;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEB_COARSE_TUNING:
          ::std::os::raw::c_uint =
    0;
pub const AL_VOCAL_MORPHER_PHONEME_A: ::std::os::raw::c_uint = 0;
pub const AL_VOCAL_MORPHER_PHONEME_E: ::std::os::raw::c_uint = 1;
pub const AL_VOCAL_MORPHER_PHONEME_I: ::std::os::raw::c_uint = 2;
pub const AL_VOCAL_MORPHER_PHONEME_O: ::std::os::raw::c_uint = 3;
pub const AL_VOCAL_MORPHER_PHONEME_U: ::std::os::raw::c_uint = 4;
pub const AL_VOCAL_MORPHER_PHONEME_AA: ::std::os::raw::c_uint = 5;
pub const AL_VOCAL_MORPHER_PHONEME_AE: ::std::os::raw::c_uint = 6;
pub const AL_VOCAL_MORPHER_PHONEME_AH: ::std::os::raw::c_uint = 7;
pub const AL_VOCAL_MORPHER_PHONEME_AO: ::std::os::raw::c_uint = 8;
pub const AL_VOCAL_MORPHER_PHONEME_EH: ::std::os::raw::c_uint = 9;
pub const AL_VOCAL_MORPHER_PHONEME_ER: ::std::os::raw::c_uint = 10;
pub const AL_VOCAL_MORPHER_PHONEME_IH: ::std::os::raw::c_uint = 11;
pub const AL_VOCAL_MORPHER_PHONEME_IY: ::std::os::raw::c_uint = 12;
pub const AL_VOCAL_MORPHER_PHONEME_UH: ::std::os::raw::c_uint = 13;
pub const AL_VOCAL_MORPHER_PHONEME_UW: ::std::os::raw::c_uint = 14;
pub const AL_VOCAL_MORPHER_PHONEME_B: ::std::os::raw::c_uint = 15;
pub const AL_VOCAL_MORPHER_PHONEME_D: ::std::os::raw::c_uint = 16;
pub const AL_VOCAL_MORPHER_PHONEME_F: ::std::os::raw::c_uint = 17;
pub const AL_VOCAL_MORPHER_PHONEME_G: ::std::os::raw::c_uint = 18;
pub const AL_VOCAL_MORPHER_PHONEME_J: ::std::os::raw::c_uint = 19;
pub const AL_VOCAL_MORPHER_PHONEME_K: ::std::os::raw::c_uint = 20;
pub const AL_VOCAL_MORPHER_PHONEME_L: ::std::os::raw::c_uint = 21;
pub const AL_VOCAL_MORPHER_PHONEME_M: ::std::os::raw::c_uint = 22;
pub const AL_VOCAL_MORPHER_PHONEME_N: ::std::os::raw::c_uint = 23;
pub const AL_VOCAL_MORPHER_PHONEME_P: ::std::os::raw::c_uint = 24;
pub const AL_VOCAL_MORPHER_PHONEME_R: ::std::os::raw::c_uint = 25;
pub const AL_VOCAL_MORPHER_PHONEME_S: ::std::os::raw::c_uint = 26;
pub const AL_VOCAL_MORPHER_PHONEME_T: ::std::os::raw::c_uint = 27;
pub const AL_VOCAL_MORPHER_PHONEME_V: ::std::os::raw::c_uint = 28;
pub const AL_VOCAL_MORPHER_PHONEME_Z: ::std::os::raw::c_uint = 29;
pub const AL_VOCAL_MORPHER_WAVEFORM_SINUSOID: ::std::os::raw::c_uint = 0;
pub const AL_VOCAL_MORPHER_WAVEFORM_TRIANGLE: ::std::os::raw::c_uint = 1;
pub const AL_VOCAL_MORPHER_WAVEFORM_SAWTOOTH: ::std::os::raw::c_uint = 2;
pub const AL_VOCAL_MORPHER_MIN_WAVEFORM: ::std::os::raw::c_uint = 0;
pub const AL_VOCAL_MORPHER_MAX_WAVEFORM: ::std::os::raw::c_uint = 2;
pub const AL_VOCAL_MORPHER_DEFAULT_WAVEFORM: ::std::os::raw::c_uint = 0;
pub const AL_VOCAL_MORPHER_MIN_RATE: f64 = 0.;
pub const AL_VOCAL_MORPHER_MAX_RATE: f64 = 10.;
pub const AL_VOCAL_MORPHER_DEFAULT_RATE: f64 = 1.41;
pub const AL_PITCH_SHIFTER_MIN_COARSE_TUNE: ::std::os::raw::c_int = -12;
pub const AL_PITCH_SHIFTER_MAX_COARSE_TUNE: ::std::os::raw::c_uint = 12;
pub const AL_PITCH_SHIFTER_DEFAULT_COARSE_TUNE: ::std::os::raw::c_uint = 12;
pub const AL_PITCH_SHIFTER_MIN_FINE_TUNE: ::std::os::raw::c_int = -50;
pub const AL_PITCH_SHIFTER_MAX_FINE_TUNE: ::std::os::raw::c_uint = 50;
pub const AL_PITCH_SHIFTER_DEFAULT_FINE_TUNE: ::std::os::raw::c_uint = 0;
pub const AL_RING_MODULATOR_MIN_FREQUENCY: f64 = 0.;
pub const AL_RING_MODULATOR_MAX_FREQUENCY: f64 = 8000.;
pub const AL_RING_MODULATOR_DEFAULT_FREQUENCY: f64 = 440.;
pub const AL_RING_MODULATOR_MIN_HIGHPASS_CUTOFF: f64 = 0.;
pub const AL_RING_MODULATOR_MAX_HIGHPASS_CUTOFF: f64 = 24000.;
pub const AL_RING_MODULATOR_DEFAULT_HIGHPASS_CUTOFF: f64 = 800.;
pub const AL_RING_MODULATOR_SINUSOID: ::std::os::raw::c_uint = 0;
pub const AL_RING_MODULATOR_SAWTOOTH: ::std::os::raw::c_uint = 1;
pub const AL_RING_MODULATOR_SQUARE: ::std::os::raw::c_uint = 2;
pub const AL_RING_MODULATOR_MIN_WAVEFORM: ::std::os::raw::c_uint = 0;
pub const AL_RING_MODULATOR_MAX_WAVEFORM: ::std::os::raw::c_uint = 2;
pub const AL_RING_MODULATOR_DEFAULT_WAVEFORM: ::std::os::raw::c_uint = 0;
pub const AL_AUTOWAH_MIN_ATTACK_TIME: f64 = 0.0001;
pub const AL_AUTOWAH_MAX_ATTACK_TIME: f64 = 1.;
pub const AL_AUTOWAH_DEFAULT_ATTACK_TIME: f64 = 0.06;
pub const AL_AUTOWAH_MIN_RELEASE_TIME: f64 = 0.0001;
pub const AL_AUTOWAH_MAX_RELEASE_TIME: f64 = 1.;
pub const AL_AUTOWAH_DEFAULT_RELEASE_TIME: f64 = 0.06;
pub const AL_AUTOWAH_MIN_RESONANCE: f64 = 2.;
pub const AL_AUTOWAH_MAX_RESONANCE: f64 = 1000.;
pub const AL_AUTOWAH_DEFAULT_RESONANCE: f64 = 1000.;
pub const AL_AUTOWAH_MIN_PEAK_GAIN: f64 = 0.00003;
pub const AL_AUTOWAH_MAX_PEAK_GAIN: f64 = 31621.;
pub const AL_AUTOWAH_DEFAULT_PEAK_GAIN: f64 = 11.22;
pub const AL_COMPRESSOR_MIN_ONOFF: ::std::os::raw::c_uint = 0;
pub const AL_COMPRESSOR_MAX_ONOFF: ::std::os::raw::c_uint = 1;
pub const AL_COMPRESSOR_DEFAULT_ONOFF: ::std::os::raw::c_uint = 1;
pub const AL_EQUALIZER_MIN_LOW_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_LOW_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_LOW_GAIN: f64 = 1.;
pub const AL_EQUALIZER_MIN_LOW_CUTOFF: f64 = 50.;
pub const AL_EQUALIZER_MAX_LOW_CUTOFF: f64 = 800.;
pub const AL_EQUALIZER_DEFAULT_LOW_CUTOFF: f64 = 200.;
pub const AL_EQUALIZER_MIN_MID1_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_MID1_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_MID1_GAIN: f64 = 1.;
pub const AL_EQUALIZER_MIN_MID1_CENTER: f64 = 200.;
pub const AL_EQUALIZER_MAX_MID1_CENTER: f64 = 3000.;
pub const AL_EQUALIZER_DEFAULT_MID1_CENTER: f64 = 500.;
pub const AL_EQUALIZER_MIN_MID1_WIDTH: f64 = 0.01;
pub const AL_EQUALIZER_MAX_MID1_WIDTH: f64 = 1.;
pub const AL_EQUALIZER_DEFAULT_MID1_WIDTH: f64 = 1.;
pub const AL_EQUALIZER_MIN_MID2_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_MID2_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_MID2_GAIN: f64 = 1.;
pub const AL_EQUALIZER_MIN_MID2_CENTER: f64 = 1000.;
pub const AL_EQUALIZER_MAX_MID2_CENTER: f64 = 8000.;
pub const AL_EQUALIZER_DEFAULT_MID2_CENTER: f64 = 3000.;
pub const AL_EQUALIZER_MIN_MID2_WIDTH: f64 = 0.01;
pub const AL_EQUALIZER_MAX_MID2_WIDTH: f64 = 1.;
pub const AL_EQUALIZER_DEFAULT_MID2_WIDTH: f64 = 1.;
pub const AL_EQUALIZER_MIN_HIGH_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_HIGH_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_HIGH_GAIN: f64 = 1.;
pub const AL_EQUALIZER_MIN_HIGH_CUTOFF: f64 = 4000.;
pub const AL_EQUALIZER_MAX_HIGH_CUTOFF: f64 = 16000.;
pub const AL_EQUALIZER_DEFAULT_HIGH_CUTOFF: f64 = 6000.;
pub const AL_MIN_AIR_ABSORPTION_FACTOR: f64 = 0.;
pub const AL_MAX_AIR_ABSORPTION_FACTOR: f64 = 10.;
pub const AL_DEFAULT_AIR_ABSORPTION_FACTOR: f64 = 0.;
pub const AL_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.;
pub const AL_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.;
pub const AL_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.;
pub const AL_MIN_CONE_OUTER_GAINHF: f64 = 0.;
pub const AL_MAX_CONE_OUTER_GAINHF: f64 = 1.;
pub const AL_DEFAULT_CONE_OUTER_GAINHF: f64 = 1.;
pub const AL_MIN_DIRECT_FILTER_GAINHF_AUTO: ::std::os::raw::c_uint = 0;
pub const AL_MAX_DIRECT_FILTER_GAINHF_AUTO: ::std::os::raw::c_uint = 1;
pub const AL_DEFAULT_DIRECT_FILTER_GAINHF_AUTO: ::std::os::raw::c_uint = 1;
pub const AL_MIN_AUXILIARY_SEND_FILTER_GAIN_AUTO: ::std::os::raw::c_uint = 0;
pub const AL_MAX_AUXILIARY_SEND_FILTER_GAIN_AUTO: ::std::os::raw::c_uint = 1;
pub const AL_DEFAULT_AUXILIARY_SEND_FILTER_GAIN_AUTO: ::std::os::raw::c_uint =
    1;
pub const AL_MIN_AUXILIARY_SEND_FILTER_GAINHF_AUTO: ::std::os::raw::c_uint =
    0;
pub const AL_MAX_AUXILIARY_SEND_FILTER_GAINHF_AUTO: ::std::os::raw::c_uint =
    1;
pub const AL_DEFAULT_AUXILIARY_SEND_FILTER_GAINHF_AUTO: ::std::os::raw::c_uint
          =
    1;
pub const AL_DEFAULT_METERS_PER_UNIT: f64 = 1.;
pub const ALC_EXT_disconnect: ::std::os::raw::c_uint = 1;
pub const ALC_CONNECTED: ::std::os::raw::c_uint = 787;
pub const ALC_EXT_thread_local_context: ::std::os::raw::c_uint = 1;
pub const AL_EXT_source_distance_model: ::std::os::raw::c_uint = 1;
pub const AL_SOURCE_DISTANCE_MODEL: ::std::os::raw::c_uint = 512;
pub const AL_SOFT_buffer_sub_data: ::std::os::raw::c_uint = 1;
pub const AL_BYTE_RW_OFFSETS_SOFT: ::std::os::raw::c_uint = 4145;
pub const AL_SAMPLE_RW_OFFSETS_SOFT: ::std::os::raw::c_uint = 4146;
pub const AL_SOFT_loop_points: ::std::os::raw::c_uint = 1;
pub const AL_LOOP_POINTS_SOFT: ::std::os::raw::c_uint = 8213;
pub const AL_EXT_FOLDBACK: ::std::os::raw::c_uint = 1;
pub const AL_EXT_FOLDBACK_NAME: &'static [u8; 16usize] =
    b"AL_EXT_FOLDBACK\x00";
pub const AL_FOLDBACK_EVENT_BLOCK: ::std::os::raw::c_uint = 16658;
pub const AL_FOLDBACK_EVENT_START: ::std::os::raw::c_uint = 16657;
pub const AL_FOLDBACK_EVENT_STOP: ::std::os::raw::c_uint = 16659;
pub const AL_FOLDBACK_MODE_MONO: ::std::os::raw::c_uint = 16641;
pub const AL_FOLDBACK_MODE_STEREO: ::std::os::raw::c_uint = 16642;
pub const ALC_EXT_DEDICATED: ::std::os::raw::c_uint = 1;
pub const AL_DEDICATED_GAIN: ::std::os::raw::c_uint = 1;
pub const AL_EFFECT_DEDICATED_DIALOGUE: ::std::os::raw::c_uint = 36865;
pub const AL_EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT: ::std::os::raw::c_uint =
    36864;
pub const AL_SOFT_buffer_samples: ::std::os::raw::c_uint = 1;
pub const AL_MONO_SOFT: ::std::os::raw::c_uint = 5376;
pub const AL_STEREO_SOFT: ::std::os::raw::c_uint = 5377;
pub const AL_REAR_SOFT: ::std::os::raw::c_uint = 5378;
pub const AL_QUAD_SOFT: ::std::os::raw::c_uint = 5379;
pub const AL_5POINT1_SOFT: ::std::os::raw::c_uint = 5380;
pub const AL_6POINT1_SOFT: ::std::os::raw::c_uint = 5381;
pub const AL_7POINT1_SOFT: ::std::os::raw::c_uint = 5382;
pub const AL_BYTE_SOFT: ::std::os::raw::c_uint = 5120;
pub const AL_UNSIGNED_BYTE_SOFT: ::std::os::raw::c_uint = 5121;
pub const AL_SHORT_SOFT: ::std::os::raw::c_uint = 5122;
pub const AL_UNSIGNED_SHORT_SOFT: ::std::os::raw::c_uint = 5123;
pub const AL_INT_SOFT: ::std::os::raw::c_uint = 5124;
pub const AL_UNSIGNED_INT_SOFT: ::std::os::raw::c_uint = 5125;
pub const AL_FLOAT_SOFT: ::std::os::raw::c_uint = 5126;
pub const AL_DOUBLE_SOFT: ::std::os::raw::c_uint = 5127;
pub const AL_BYTE3_SOFT: ::std::os::raw::c_uint = 5128;
pub const AL_UNSIGNED_BYTE3_SOFT: ::std::os::raw::c_uint = 5129;
pub const AL_MONO8_SOFT: ::std::os::raw::c_uint = 4352;
pub const AL_MONO16_SOFT: ::std::os::raw::c_uint = 4353;
pub const AL_MONO32F_SOFT: ::std::os::raw::c_uint = 65552;
pub const AL_STEREO8_SOFT: ::std::os::raw::c_uint = 4354;
pub const AL_STEREO16_SOFT: ::std::os::raw::c_uint = 4355;
pub const AL_STEREO32F_SOFT: ::std::os::raw::c_uint = 65553;
pub const AL_QUAD8_SOFT: ::std::os::raw::c_uint = 4612;
pub const AL_QUAD16_SOFT: ::std::os::raw::c_uint = 4613;
pub const AL_QUAD32F_SOFT: ::std::os::raw::c_uint = 4614;
pub const AL_REAR8_SOFT: ::std::os::raw::c_uint = 4615;
pub const AL_REAR16_SOFT: ::std::os::raw::c_uint = 4616;
pub const AL_REAR32F_SOFT: ::std::os::raw::c_uint = 4617;
pub const AL_5POINT1_8_SOFT: ::std::os::raw::c_uint = 4618;
pub const AL_5POINT1_16_SOFT: ::std::os::raw::c_uint = 4619;
pub const AL_5POINT1_32F_SOFT: ::std::os::raw::c_uint = 4620;
pub const AL_6POINT1_8_SOFT: ::std::os::raw::c_uint = 4621;
pub const AL_6POINT1_16_SOFT: ::std::os::raw::c_uint = 4622;
pub const AL_6POINT1_32F_SOFT: ::std::os::raw::c_uint = 4623;
pub const AL_7POINT1_8_SOFT: ::std::os::raw::c_uint = 4624;
pub const AL_7POINT1_16_SOFT: ::std::os::raw::c_uint = 4625;
pub const AL_7POINT1_32F_SOFT: ::std::os::raw::c_uint = 4626;
pub const AL_INTERNAL_FORMAT_SOFT: ::std::os::raw::c_uint = 8200;
pub const AL_BYTE_LENGTH_SOFT: ::std::os::raw::c_uint = 8201;
pub const AL_SAMPLE_LENGTH_SOFT: ::std::os::raw::c_uint = 8202;
pub const AL_SEC_LENGTH_SOFT: ::std::os::raw::c_uint = 8203;
pub const AL_SOFT_direct_channels: ::std::os::raw::c_uint = 1;
pub const AL_DIRECT_CHANNELS_SOFT: ::std::os::raw::c_uint = 4147;
pub const ALC_SOFT_loopback: ::std::os::raw::c_uint = 1;
pub const ALC_FORMAT_CHANNELS_SOFT: ::std::os::raw::c_uint = 6544;
pub const ALC_FORMAT_TYPE_SOFT: ::std::os::raw::c_uint = 6545;
pub const ALC_BYTE_SOFT: ::std::os::raw::c_uint = 5120;
pub const ALC_UNSIGNED_BYTE_SOFT: ::std::os::raw::c_uint = 5121;
pub const ALC_SHORT_SOFT: ::std::os::raw::c_uint = 5122;
pub const ALC_UNSIGNED_SHORT_SOFT: ::std::os::raw::c_uint = 5123;
pub const ALC_INT_SOFT: ::std::os::raw::c_uint = 5124;
pub const ALC_UNSIGNED_INT_SOFT: ::std::os::raw::c_uint = 5125;
pub const ALC_FLOAT_SOFT: ::std::os::raw::c_uint = 5126;
pub const ALC_MONO_SOFT: ::std::os::raw::c_uint = 5376;
pub const ALC_STEREO_SOFT: ::std::os::raw::c_uint = 5377;
pub const ALC_QUAD_SOFT: ::std::os::raw::c_uint = 5379;
pub const ALC_5POINT1_SOFT: ::std::os::raw::c_uint = 5380;
pub const ALC_6POINT1_SOFT: ::std::os::raw::c_uint = 5381;
pub const ALC_7POINT1_SOFT: ::std::os::raw::c_uint = 5382;
pub const AL_EXT_STEREO_ANGLES: ::std::os::raw::c_uint = 1;
pub const AL_STEREO_ANGLES: ::std::os::raw::c_uint = 4144;
pub const AL_EXT_SOURCE_RADIUS: ::std::os::raw::c_uint = 1;
pub const AL_SOURCE_RADIUS: ::std::os::raw::c_uint = 4145;
pub const AL_SOFT_source_latency: ::std::os::raw::c_uint = 1;
pub const AL_SAMPLE_OFFSET_LATENCY_SOFT: ::std::os::raw::c_uint = 4608;
pub const AL_SEC_OFFSET_LATENCY_SOFT: ::std::os::raw::c_uint = 4609;
pub const ALC_EXT_DEFAULT_FILTER_ORDER: ::std::os::raw::c_uint = 1;
pub const ALC_DEFAULT_FILTER_ORDER: ::std::os::raw::c_uint = 4352;
pub const AL_SOFT_deferred_updates: ::std::os::raw::c_uint = 1;
pub const AL_DEFERRED_UPDATES_SOFT: ::std::os::raw::c_uint = 49154;
pub const AL_SOFT_block_alignment: ::std::os::raw::c_uint = 1;
pub const AL_UNPACK_BLOCK_ALIGNMENT_SOFT: ::std::os::raw::c_uint = 8204;
pub const AL_PACK_BLOCK_ALIGNMENT_SOFT: ::std::os::raw::c_uint = 8205;
pub const AL_SOFT_MSADPCM: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_MONO_MSADPCM_SOFT: ::std::os::raw::c_uint = 4866;
pub const AL_FORMAT_STEREO_MSADPCM_SOFT: ::std::os::raw::c_uint = 4867;
pub const AL_SOFT_source_length: ::std::os::raw::c_uint = 1;
pub const ALC_SOFT_pause_device: ::std::os::raw::c_uint = 1;
pub const AL_EXT_BFORMAT: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_BFORMAT2D_8: ::std::os::raw::c_uint = 131105;
pub const AL_FORMAT_BFORMAT2D_16: ::std::os::raw::c_uint = 131106;
pub const AL_FORMAT_BFORMAT2D_FLOAT32: ::std::os::raw::c_uint = 131107;
pub const AL_FORMAT_BFORMAT3D_8: ::std::os::raw::c_uint = 131121;
pub const AL_FORMAT_BFORMAT3D_16: ::std::os::raw::c_uint = 131122;
pub const AL_FORMAT_BFORMAT3D_FLOAT32: ::std::os::raw::c_uint = 131123;
pub const AL_EXT_MULAW_BFORMAT: ::std::os::raw::c_uint = 1;
pub const AL_FORMAT_BFORMAT2D_MULAW: ::std::os::raw::c_uint = 65585;
pub const AL_FORMAT_BFORMAT3D_MULAW: ::std::os::raw::c_uint = 65586;
pub const ALC_SOFT_HRTF: ::std::os::raw::c_uint = 1;
pub const ALC_HRTF_SOFT: ::std::os::raw::c_uint = 6546;
pub const ALC_DONT_CARE_SOFT: ::std::os::raw::c_uint = 2;
pub const ALC_HRTF_STATUS_SOFT: ::std::os::raw::c_uint = 6547;
pub const ALC_HRTF_DISABLED_SOFT: ::std::os::raw::c_uint = 0;
pub const ALC_HRTF_ENABLED_SOFT: ::std::os::raw::c_uint = 1;
pub const ALC_HRTF_DENIED_SOFT: ::std::os::raw::c_uint = 2;
pub const ALC_HRTF_REQUIRED_SOFT: ::std::os::raw::c_uint = 3;
pub const ALC_HRTF_HEADPHONES_DETECTED_SOFT: ::std::os::raw::c_uint = 4;
pub const ALC_HRTF_UNSUPPORTED_FORMAT_SOFT: ::std::os::raw::c_uint = 5;
pub const ALC_NUM_HRTF_SPECIFIERS_SOFT: ::std::os::raw::c_uint = 6548;
pub const ALC_HRTF_SPECIFIER_SOFT: ::std::os::raw::c_uint = 6549;
pub const ALC_HRTF_ID_SOFT: ::std::os::raw::c_uint = 6550;
pub const AL_SOFT_gain_clamp_ex: ::std::os::raw::c_uint = 1;
pub const AL_GAIN_LIMIT_SOFT: ::std::os::raw::c_uint = 8206;
pub const AL_NUM_RESAMPLERS_SOFT: ::std::os::raw::c_uint = 4624;
pub const AL_DEFAULT_RESAMPLER_SOFT: ::std::os::raw::c_uint = 4625;
pub const AL_SOURCE_RESAMPLER_SOFT: ::std::os::raw::c_uint = 4626;
pub const AL_RESAMPLER_NAME_SOFT: ::std::os::raw::c_uint = 4627;
pub const AL_SOURCE_SPATIALIZE_SOFT: ::std::os::raw::c_uint = 4628;
pub const AL_AUTO_SOFT: ::std::os::raw::c_uint = 2;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __uintptr_t = ::std::os::raw::c_ulong;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_fast16_t = i64;
pub type uint_fast16_t = u64;
pub type int_fast32_t = i64;
pub type uint_fast32_t = u64;
pub type uintmax_t = u64;
pub type intmax_t = i64;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(::std::mem::size_of::<imaxdiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( imaxdiv_t ) ));
    assert_eq! (::std::mem::align_of::<imaxdiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( imaxdiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imaxdiv_t ) ) . quot as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( imaxdiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imaxdiv_t ) ) . rem as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( imaxdiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for imaxdiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn imaxabs(arg1: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(arg1: intmax_t, arg2: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(arg1: *const ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(arg1: *const ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                     arg3: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                     arg3: ::std::os::raw::c_int) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALCdevice_struct {
    _unused: [u8; 0],
}
/** Opaque device handle */
pub type ALCdevice = ALCdevice_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALCcontext_struct {
    _unused: [u8; 0],
}
/** Opaque context handle */
pub type ALCcontext = ALCcontext_struct;
/** 8-bit boolean */
pub type ALCboolean = ::std::os::raw::c_char;
/** character */
pub type ALCchar = ::std::os::raw::c_char;
/** signed 8-bit 2's complement integer */
pub type ALCbyte = ::std::os::raw::c_schar;
/** unsigned 8-bit integer */
pub type ALCubyte = ::std::os::raw::c_uchar;
/** signed 16-bit 2's complement integer */
pub type ALCshort = ::std::os::raw::c_short;
/** unsigned 16-bit integer */
pub type ALCushort = ::std::os::raw::c_ushort;
/** signed 32-bit 2's complement integer */
pub type ALCint = ::std::os::raw::c_int;
/** unsigned 32-bit integer */
pub type ALCuint = ::std::os::raw::c_uint;
/** non-negative 32-bit binary integer size */
pub type ALCsizei = ::std::os::raw::c_int;
/** enumerated 32-bit value */
pub type ALCenum = ::std::os::raw::c_int;
/** 32-bit IEEE754 floating-point */
pub type ALCfloat = f32;
/** 64-bit IEEE754 floating-point */
pub type ALCdouble = f64;
/** void type (for opaque pointers only) */
pub type ALCvoid = ::std::os::raw::c_void;
extern "C" {
    /** Context management. */
    pub fn alcCreateContext(device: *mut ALCdevice, attrlist: *const ALCint)
     -> *mut ALCcontext;
}
extern "C" {
    pub fn alcMakeContextCurrent(context: *mut ALCcontext) -> ALCboolean;
}
extern "C" {
    pub fn alcProcessContext(context: *mut ALCcontext);
}
extern "C" {
    pub fn alcSuspendContext(context: *mut ALCcontext);
}
extern "C" {
    pub fn alcDestroyContext(context: *mut ALCcontext);
}
extern "C" {
    pub fn alcGetCurrentContext() -> *mut ALCcontext;
}
extern "C" {
    pub fn alcGetContextsDevice(context: *mut ALCcontext) -> *mut ALCdevice;
}
extern "C" {
    /** Device management. */
    pub fn alcOpenDevice(devicename: *const ALCchar) -> *mut ALCdevice;
}
extern "C" {
    pub fn alcCloseDevice(device: *mut ALCdevice) -> ALCboolean;
}
extern "C" {
    /**
 * Error support.
 *
 * Obtain the most recent Device error.
 */
    pub fn alcGetError(device: *mut ALCdevice) -> ALCenum;
}
extern "C" {
    /**
 * Extension support.
 *
 * Query for the presence of an extension, and obtain any appropriate
 * function pointers and enum values.
 */
    pub fn alcIsExtensionPresent(device: *mut ALCdevice,
                                 extname: *const ALCchar) -> ALCboolean;
}
extern "C" {
    pub fn alcGetProcAddress(device: *mut ALCdevice, funcname: *const ALCchar)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alcGetEnumValue(device: *mut ALCdevice, enumname: *const ALCchar)
     -> ALCenum;
}
extern "C" {
    /** Query function. */
    pub fn alcGetString(device: *mut ALCdevice, param: ALCenum)
     -> *const ALCchar;
}
extern "C" {
    pub fn alcGetIntegerv(device: *mut ALCdevice, param: ALCenum,
                          size: ALCsizei, values: *mut ALCint);
}
extern "C" {
    /** Capture function. */
    pub fn alcCaptureOpenDevice(devicename: *const ALCchar,
                                frequency: ALCuint, format: ALCenum,
                                buffersize: ALCsizei) -> *mut ALCdevice;
}
extern "C" {
    pub fn alcCaptureCloseDevice(device: *mut ALCdevice) -> ALCboolean;
}
extern "C" {
    pub fn alcCaptureStart(device: *mut ALCdevice);
}
extern "C" {
    pub fn alcCaptureStop(device: *mut ALCdevice);
}
extern "C" {
    pub fn alcCaptureSamples(device: *mut ALCdevice, buffer: *mut ALCvoid,
                             samples: ALCsizei);
}
/** Pointer-to-function type, useful for dynamically getting ALC entry points. */
pub type LPALCCREATECONTEXT =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               attrlist: *const ALCint)
                              -> *mut ALCcontext>;
pub type LPALCMAKECONTEXTCURRENT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)
                              -> ALCboolean>;
pub type LPALCPROCESSCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCSUSPENDCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCDESTROYCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCGETCURRENTCONTEXT =
    ::std::option::Option<unsafe extern "C" fn() -> *mut ALCcontext>;
pub type LPALCGETCONTEXTSDEVICE =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)
                              -> *mut ALCdevice>;
pub type LPALCOPENDEVICE =
    ::std::option::Option<unsafe extern "C" fn(devicename: *const ALCchar)
                              -> *mut ALCdevice>;
pub type LPALCCLOSEDEVICE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)
                              -> ALCboolean>;
pub type LPALCGETERROR =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)
                              -> ALCenum>;
pub type LPALCISEXTENSIONPRESENT =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               extname: *const ALCchar)
                              -> ALCboolean>;
pub type LPALCGETPROCADDRESS =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               funcname: *const ALCchar)
                              -> *mut ::std::os::raw::c_void>;
pub type LPALCGETENUMVALUE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               enumname: *const ALCchar)
                              -> ALCenum>;
pub type LPALCGETSTRING =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               param: ALCenum)
                              -> *const ALCchar>;
pub type LPALCGETINTEGERV =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               param: ALCenum, size: ALCsizei,
                                               values: *mut ALCint)>;
pub type LPALCCAPTUREOPENDEVICE =
    ::std::option::Option<unsafe extern "C" fn(devicename: *const ALCchar,
                                               frequency: ALCuint,
                                               format: ALCenum,
                                               buffersize: ALCsizei)
                              -> *mut ALCdevice>;
pub type LPALCCAPTURECLOSEDEVICE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)
                              -> ALCboolean>;
pub type LPALCCAPTURESTART =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCCAPTURESTOP =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCCAPTURESAMPLES =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               buffer: *mut ALCvoid,
                                               samples: ALCsizei)>;
/** 8-bit boolean */
pub type ALboolean = ::std::os::raw::c_char;
/** character */
pub type ALchar = ::std::os::raw::c_char;
/** signed 8-bit 2's complement integer */
pub type ALbyte = ::std::os::raw::c_schar;
/** unsigned 8-bit integer */
pub type ALubyte = ::std::os::raw::c_uchar;
/** signed 16-bit 2's complement integer */
pub type ALshort = ::std::os::raw::c_short;
/** unsigned 16-bit integer */
pub type ALushort = ::std::os::raw::c_ushort;
/** signed 32-bit 2's complement integer */
pub type ALint = ::std::os::raw::c_int;
/** unsigned 32-bit integer */
pub type ALuint = ::std::os::raw::c_uint;
/** non-negative 32-bit binary integer size */
pub type ALsizei = ::std::os::raw::c_int;
/** enumerated 32-bit value */
pub type ALenum = ::std::os::raw::c_int;
/** 32-bit IEEE754 floating-point */
pub type ALfloat = f32;
/** 64-bit IEEE754 floating-point */
pub type ALdouble = f64;
/** void type (for opaque pointers only) */
pub type ALvoid = ::std::os::raw::c_void;
extern "C" {
    pub fn alDopplerFactor(value: ALfloat);
}
extern "C" {
    pub fn alDopplerVelocity(value: ALfloat);
}
extern "C" {
    pub fn alSpeedOfSound(value: ALfloat);
}
extern "C" {
    pub fn alDistanceModel(distanceModel: ALenum);
}
extern "C" {
    /** Renderer State management. */
    pub fn alEnable(capability: ALenum);
}
extern "C" {
    pub fn alDisable(capability: ALenum);
}
extern "C" {
    pub fn alIsEnabled(capability: ALenum) -> ALboolean;
}
extern "C" {
    /** State retrieval. */
    pub fn alGetString(param: ALenum) -> *const ALchar;
}
extern "C" {
    pub fn alGetBooleanv(param: ALenum, values: *mut ALboolean);
}
extern "C" {
    pub fn alGetIntegerv(param: ALenum, values: *mut ALint);
}
extern "C" {
    pub fn alGetFloatv(param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetDoublev(param: ALenum, values: *mut ALdouble);
}
extern "C" {
    pub fn alGetBoolean(param: ALenum) -> ALboolean;
}
extern "C" {
    pub fn alGetInteger(param: ALenum) -> ALint;
}
extern "C" {
    pub fn alGetFloat(param: ALenum) -> ALfloat;
}
extern "C" {
    pub fn alGetDouble(param: ALenum) -> ALdouble;
}
extern "C" {
    /**
 * Error retrieval.
 *
 * Obtain the first error generated in the AL context since the last check.
 */
    pub fn alGetError() -> ALenum;
}
extern "C" {
    /**
 * Extension support.
 *
 * Query for the presence of an extension, and obtain any appropriate function
 * pointers and enum values.
 */
    pub fn alIsExtensionPresent(extname: *const ALchar) -> ALboolean;
}
extern "C" {
    pub fn alGetProcAddress(fname: *const ALchar)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alGetEnumValue(ename: *const ALchar) -> ALenum;
}
extern "C" {
    /** Set Listener parameters */
    pub fn alListenerf(param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alListener3f(param: ALenum, value1: ALfloat, value2: ALfloat,
                        value3: ALfloat);
}
extern "C" {
    pub fn alListenerfv(param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alListeneri(param: ALenum, value: ALint);
}
extern "C" {
    pub fn alListener3i(param: ALenum, value1: ALint, value2: ALint,
                        value3: ALint);
}
extern "C" {
    pub fn alListeneriv(param: ALenum, values: *const ALint);
}
extern "C" {
    /** Get Listener parameters */
    pub fn alGetListenerf(param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetListener3f(param: ALenum, value1: *mut ALfloat,
                           value2: *mut ALfloat, value3: *mut ALfloat);
}
extern "C" {
    pub fn alGetListenerfv(param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetListeneri(param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetListener3i(param: ALenum, value1: *mut ALint,
                           value2: *mut ALint, value3: *mut ALint);
}
extern "C" {
    pub fn alGetListeneriv(param: ALenum, values: *mut ALint);
}
extern "C" {
    /** Create Source objects. */
    pub fn alGenSources(n: ALsizei, sources: *mut ALuint);
}
extern "C" {
    /** Delete Source objects. */
    pub fn alDeleteSources(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /** Verify a handle is a valid Source. */
    pub fn alIsSource(source: ALuint) -> ALboolean;
}
extern "C" {
    /** Set Source parameters. */
    pub fn alSourcef(source: ALuint, param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alSource3f(source: ALuint, param: ALenum, value1: ALfloat,
                      value2: ALfloat, value3: ALfloat);
}
extern "C" {
    pub fn alSourcefv(source: ALuint, param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alSourcei(source: ALuint, param: ALenum, value: ALint);
}
extern "C" {
    pub fn alSource3i(source: ALuint, param: ALenum, value1: ALint,
                      value2: ALint, value3: ALint);
}
extern "C" {
    pub fn alSourceiv(source: ALuint, param: ALenum, values: *const ALint);
}
extern "C" {
    /** Get Source parameters. */
    pub fn alGetSourcef(source: ALuint, param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetSource3f(source: ALuint, param: ALenum, value1: *mut ALfloat,
                         value2: *mut ALfloat, value3: *mut ALfloat);
}
extern "C" {
    pub fn alGetSourcefv(source: ALuint, param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetSourcei(source: ALuint, param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetSource3i(source: ALuint, param: ALenum, value1: *mut ALint,
                         value2: *mut ALint, value3: *mut ALint);
}
extern "C" {
    pub fn alGetSourceiv(source: ALuint, param: ALenum, values: *mut ALint);
}
extern "C" {
    /** Play, replay, or resume (if paused) a list of Sources */
    pub fn alSourcePlayv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /** Stop a list of Sources */
    pub fn alSourceStopv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /** Rewind a list of Sources */
    pub fn alSourceRewindv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /** Pause a list of Sources */
    pub fn alSourcePausev(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    /** Play, replay, or resume a Source */
    pub fn alSourcePlay(source: ALuint);
}
extern "C" {
    /** Stop a Source */
    pub fn alSourceStop(source: ALuint);
}
extern "C" {
    /** Rewind a Source (set playback postiton to beginning) */
    pub fn alSourceRewind(source: ALuint);
}
extern "C" {
    /** Pause a Source */
    pub fn alSourcePause(source: ALuint);
}
extern "C" {
    /** Queue buffers onto a source */
    pub fn alSourceQueueBuffers(source: ALuint, nb: ALsizei,
                                buffers: *const ALuint);
}
extern "C" {
    /** Unqueue processed buffers from a source */
    pub fn alSourceUnqueueBuffers(source: ALuint, nb: ALsizei,
                                  buffers: *mut ALuint);
}
extern "C" {
    /** Create Buffer objects */
    pub fn alGenBuffers(n: ALsizei, buffers: *mut ALuint);
}
extern "C" {
    /** Delete Buffer objects */
    pub fn alDeleteBuffers(n: ALsizei, buffers: *const ALuint);
}
extern "C" {
    /** Verify a handle is a valid Buffer */
    pub fn alIsBuffer(buffer: ALuint) -> ALboolean;
}
extern "C" {
    /** Specifies the data to be copied into a buffer */
    pub fn alBufferData(buffer: ALuint, format: ALenum, data: *const ALvoid,
                        size: ALsizei, freq: ALsizei);
}
extern "C" {
    /** Set Buffer parameters, */
    pub fn alBufferf(buffer: ALuint, param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alBuffer3f(buffer: ALuint, param: ALenum, value1: ALfloat,
                      value2: ALfloat, value3: ALfloat);
}
extern "C" {
    pub fn alBufferfv(buffer: ALuint, param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alBufferi(buffer: ALuint, param: ALenum, value: ALint);
}
extern "C" {
    pub fn alBuffer3i(buffer: ALuint, param: ALenum, value1: ALint,
                      value2: ALint, value3: ALint);
}
extern "C" {
    pub fn alBufferiv(buffer: ALuint, param: ALenum, values: *const ALint);
}
extern "C" {
    /** Get Buffer parameters. */
    pub fn alGetBufferf(buffer: ALuint, param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetBuffer3f(buffer: ALuint, param: ALenum, value1: *mut ALfloat,
                         value2: *mut ALfloat, value3: *mut ALfloat);
}
extern "C" {
    pub fn alGetBufferfv(buffer: ALuint, param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetBufferi(buffer: ALuint, param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetBuffer3i(buffer: ALuint, param: ALenum, value1: *mut ALint,
                         value2: *mut ALint, value3: *mut ALint);
}
extern "C" {
    pub fn alGetBufferiv(buffer: ALuint, param: ALenum, values: *mut ALint);
}
/** Pointer-to-function type, useful for dynamically getting AL entry points. */
pub type LPALENABLE =
    ::std::option::Option<unsafe extern "C" fn(capability: ALenum)>;
pub type LPALDISABLE =
    ::std::option::Option<unsafe extern "C" fn(capability: ALenum)>;
pub type LPALISENABLED =
    ::std::option::Option<unsafe extern "C" fn(capability: ALenum)
                              -> ALboolean>;
pub type LPALGETSTRING =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum)
                              -> *const ALchar>;
pub type LPALGETBOOLEANV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               values: *mut ALboolean)>;
pub type LPALGETINTEGERV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               values: *mut ALint)>;
pub type LPALGETFLOATV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               values: *mut ALfloat)>;
pub type LPALGETDOUBLEV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               values: *mut ALdouble)>;
pub type LPALGETBOOLEAN =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALboolean>;
pub type LPALGETINTEGER =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALint>;
pub type LPALGETFLOAT =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALfloat>;
pub type LPALGETDOUBLE =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALdouble>;
pub type LPALGETERROR =
    ::std::option::Option<unsafe extern "C" fn() -> ALenum>;
pub type LPALISEXTENSIONPRESENT =
    ::std::option::Option<unsafe extern "C" fn(extname: *const ALchar)
                              -> ALboolean>;
pub type LPALGETPROCADDRESS =
    ::std::option::Option<unsafe extern "C" fn(fname: *const ALchar)
                              -> *mut ::std::os::raw::c_void>;
pub type LPALGETENUMVALUE =
    ::std::option::Option<unsafe extern "C" fn(ename: *const ALchar)
                              -> ALenum>;
pub type LPALLISTENERF =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               value: ALfloat)>;
pub type LPALLISTENER3F =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, value1: ALfloat,
                                               value2: ALfloat,
                                               value3: ALfloat)>;
pub type LPALLISTENERFV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               values: *const ALfloat)>;
pub type LPALLISTENERI =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: ALint)>;
pub type LPALLISTENER3I =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, value1: ALint,
                                               value2: ALint, value3: ALint)>;
pub type LPALLISTENERIV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               values: *const ALint)>;
pub type LPALGETLISTENERF =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               value: *mut ALfloat)>;
pub type LPALGETLISTENER3F =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               value1: *mut ALfloat,
                                               value2: *mut ALfloat,
                                               value3: *mut ALfloat)>;
pub type LPALGETLISTENERFV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               values: *mut ALfloat)>;
pub type LPALGETLISTENERI =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               value: *mut ALint)>;
pub type LPALGETLISTENER3I =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               value1: *mut ALint,
                                               value2: *mut ALint,
                                               value3: *mut ALint)>;
pub type LPALGETLISTENERIV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum,
                                               values: *mut ALint)>;
pub type LPALGENSOURCES =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei,
                                               sources: *mut ALuint)>;
pub type LPALDELETESOURCES =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei,
                                               sources: *const ALuint)>;
pub type LPALISSOURCE =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint) -> ALboolean>;
pub type LPALSOURCEF =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               value: ALfloat)>;
pub type LPALSOURCE3F =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               value1: ALfloat,
                                               value2: ALfloat,
                                               value3: ALfloat)>;
pub type LPALSOURCEFV =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               values: *const ALfloat)>;
pub type LPALSOURCEI =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               value: ALint)>;
pub type LPALSOURCE3I =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               value1: ALint, value2: ALint,
                                               value3: ALint)>;
pub type LPALSOURCEIV =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               values: *const ALint)>;
pub type LPALGETSOURCEF =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               value: *mut ALfloat)>;
pub type LPALGETSOURCE3F =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               value1: *mut ALfloat,
                                               value2: *mut ALfloat,
                                               value3: *mut ALfloat)>;
pub type LPALGETSOURCEFV =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               values: *mut ALfloat)>;
pub type LPALGETSOURCEI =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               value: *mut ALint)>;
pub type LPALGETSOURCE3I =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               value1: *mut ALint,
                                               value2: *mut ALint,
                                               value3: *mut ALint)>;
pub type LPALGETSOURCEIV =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum,
                                               values: *mut ALint)>;
pub type LPALSOURCEPLAYV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei,
                                               sources: *const ALuint)>;
pub type LPALSOURCESTOPV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei,
                                               sources: *const ALuint)>;
pub type LPALSOURCEREWINDV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei,
                                               sources: *const ALuint)>;
pub type LPALSOURCEPAUSEV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei,
                                               sources: *const ALuint)>;
pub type LPALSOURCEPLAY =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCESTOP =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEREWIND =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEPAUSE =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEQUEUEBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, nb: ALsizei,
                                               buffers: *const ALuint)>;
pub type LPALSOURCEUNQUEUEBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, nb: ALsizei,
                                               buffers: *mut ALuint)>;
pub type LPALGENBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei,
                                               buffers: *mut ALuint)>;
pub type LPALDELETEBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei,
                                               buffers: *const ALuint)>;
pub type LPALISBUFFER =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint) -> ALboolean>;
pub type LPALBUFFERDATA =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, format: ALenum,
                                               data: *const ALvoid,
                                               size: ALsizei, freq: ALsizei)>;
pub type LPALBUFFERF =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               value: ALfloat)>;
pub type LPALBUFFER3F =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               value1: ALfloat,
                                               value2: ALfloat,
                                               value3: ALfloat)>;
pub type LPALBUFFERFV =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               values: *const ALfloat)>;
pub type LPALBUFFERI =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               value: ALint)>;
pub type LPALBUFFER3I =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               value1: ALint, value2: ALint,
                                               value3: ALint)>;
pub type LPALBUFFERIV =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               values: *const ALint)>;
pub type LPALGETBUFFERF =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               value: *mut ALfloat)>;
pub type LPALGETBUFFER3F =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               value1: *mut ALfloat,
                                               value2: *mut ALfloat,
                                               value3: *mut ALfloat)>;
pub type LPALGETBUFFERFV =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               values: *mut ALfloat)>;
pub type LPALGETBUFFERI =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               value: *mut ALint)>;
pub type LPALGETBUFFER3I =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               value1: *mut ALint,
                                               value2: *mut ALint,
                                               value3: *mut ALint)>;
pub type LPALGETBUFFERIV =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum,
                                               values: *mut ALint)>;
pub type LPALDOPPLERFACTOR =
    ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALDOPPLERVELOCITY =
    ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALSPEEDOFSOUND =
    ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALDISTANCEMODEL =
    ::std::option::Option<unsafe extern "C" fn(distanceModel: ALenum)>;
pub type PFNALBUFFERDATASTATICPROC =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALint, arg2: ALenum,
                                               arg3: *mut ALvoid,
                                               arg4: ALsizei, arg5: ALsizei)
                              -> ALvoid>;
pub type LPALGENEFFECTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei,
                                               arg2: *mut ALuint)>;
pub type LPALDELETEEFFECTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei,
                                               arg2: *const ALuint)>;
pub type LPALISEFFECT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALEFFECTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALint)>;
pub type LPALEFFECTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALint)>;
pub type LPALEFFECTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALfloat)>;
pub type LPALEFFECTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALfloat)>;
pub type LPALGETEFFECTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint)>;
pub type LPALGETEFFECTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint)>;
pub type LPALGETEFFECTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALfloat)>;
pub type LPALGETEFFECTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALfloat)>;
pub type LPALGENFILTERS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei,
                                               arg2: *mut ALuint)>;
pub type LPALDELETEFILTERS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei,
                                               arg2: *const ALuint)>;
pub type LPALISFILTER =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALFILTERI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALint)>;
pub type LPALFILTERIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALint)>;
pub type LPALFILTERF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALfloat)>;
pub type LPALFILTERFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALfloat)>;
pub type LPALGETFILTERI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint)>;
pub type LPALGETFILTERIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint)>;
pub type LPALGETFILTERF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALfloat)>;
pub type LPALGETFILTERFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALfloat)>;
pub type LPALGENAUXILIARYEFFECTSLOTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei,
                                               arg2: *mut ALuint)>;
pub type LPALDELETEAUXILIARYEFFECTSLOTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei,
                                               arg2: *const ALuint)>;
pub type LPALISAUXILIARYEFFECTSLOT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALAUXILIARYEFFECTSLOTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALint)>;
pub type LPALAUXILIARYEFFECTSLOTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALint)>;
pub type LPALAUXILIARYEFFECTSLOTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALfloat)>;
pub type LPALAUXILIARYEFFECTSLOTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALfloat)>;
pub type LPALGETAUXILIARYEFFECTSLOTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint)>;
pub type LPALGETAUXILIARYEFFECTSLOTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint)>;
pub type LPALGETAUXILIARYEFFECTSLOTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALfloat)>;
pub type LPALGETAUXILIARYEFFECTSLOTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALfloat)>;
pub type PFNALCSETTHREADCONTEXTPROC =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)
                              -> ALCboolean>;
pub type PFNALCGETTHREADCONTEXTPROC =
    ::std::option::Option<unsafe extern "C" fn() -> *mut ALCcontext>;
pub type PFNALBUFFERSUBDATASOFTPROC =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALvoid,
                                               arg4: ALsizei, arg5: ALsizei)
                              -> ALvoid>;
pub type LPALFOLDBACKCALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALenum, arg2: ALsizei)>;
pub type LPALREQUESTFOLDBACKSTART =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALenum, arg2: ALsizei,
                                               arg3: ALsizei,
                                               arg4: *mut ALfloat,
                                               arg5: LPALFOLDBACKCALLBACK)>;
pub type LPALREQUESTFOLDBACKSTOP =
    ::std::option::Option<unsafe extern "C" fn()>;
pub type LPALBUFFERSAMPLESSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALuint,
                                               arg3: ALenum, arg4: ALsizei,
                                               arg5: ALenum, arg6: ALenum,
                                               arg7: *const ALvoid)>;
pub type LPALBUFFERSUBSAMPLESSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALsizei,
                                               arg3: ALsizei, arg4: ALenum,
                                               arg5: ALenum,
                                               arg6: *const ALvoid)>;
pub type LPALGETBUFFERSAMPLESSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALsizei,
                                               arg3: ALsizei, arg4: ALenum,
                                               arg5: ALenum,
                                               arg6: *mut ALvoid)>;
pub type LPALISBUFFERFORMATSUPPORTEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALenum) -> ALboolean>;
pub type LPALCLOOPBACKOPENDEVICESOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ALCchar)
                              -> *mut ALCdevice>;
pub type LPALCISRENDERFORMATSUPPORTEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ALCdevice,
                                               arg2: ALCsizei, arg3: ALCenum,
                                               arg4: ALCenum) -> ALCboolean>;
pub type LPALCRENDERSAMPLESSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ALCdevice,
                                               arg2: *mut ALCvoid,
                                               arg3: ALCsizei)>;
pub type ALint64SOFT = i64;
pub type ALuint64SOFT = u64;
pub type LPALSOURCEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALdouble)>;
pub type LPALSOURCE3DSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALdouble, arg4: ALdouble,
                                               arg5: ALdouble)>;
pub type LPALSOURCEDVSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALdouble)>;
pub type LPALGETSOURCEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALdouble)>;
pub type LPALGETSOURCE3DSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALdouble,
                                               arg4: *mut ALdouble,
                                               arg5: *mut ALdouble)>;
pub type LPALGETSOURCEDVSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALdouble)>;
pub type LPALSOURCEI64SOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALint64SOFT)>;
pub type LPALSOURCE3I64SOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: ALint64SOFT,
                                               arg4: ALint64SOFT,
                                               arg5: ALint64SOFT)>;
pub type LPALSOURCEI64VSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *const ALint64SOFT)>;
pub type LPALGETSOURCEI64SOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint64SOFT)>;
pub type LPALGETSOURCE3I64SOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint64SOFT,
                                               arg4: *mut ALint64SOFT,
                                               arg5: *mut ALint64SOFT)>;
pub type LPALGETSOURCEI64VSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum,
                                               arg3: *mut ALint64SOFT)>;
pub type LPALDEFERUPDATESSOFT =
    ::std::option::Option<unsafe extern "C" fn() -> ALvoid>;
pub type LPALPROCESSUPDATESSOFT =
    ::std::option::Option<unsafe extern "C" fn() -> ALvoid>;
pub type LPALCDEVICEPAUSESOFT =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCDEVICERESUMESOFT =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCGETSTRINGISOFT =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               paramName: ALCenum,
                                               index: ALCsizei)
                              -> *const ALCchar>;
pub type LPALCRESETDEVICESOFT =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice,
                                               attribs: *const ALCint)
                              -> ALCboolean>;
pub type LPALGETSTRINGISOFT =
    ::std::option::Option<unsafe extern "C" fn(pname: ALenum, index: ALsizei)
                              -> *const ALchar>;
